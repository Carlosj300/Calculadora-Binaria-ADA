(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_short_integer =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref =
  { mutable short_short_integer__content "model_trace:" "name:" : short_short_integer }
 
 function short_short_integer__ref___projection 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref___projection
 
 meta "inline : no" function short_short_integer__ref___projection
 
 val short_short_integer__havoc 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__short_short_integer.short_short_integer) : int =
  (Standard__short_short_integer.short_short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_integer =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref =
  { mutable short_integer__content "model_trace:" "name:" : short_integer }
 
 function short_integer__ref___projection 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref___projection
 
 meta "inline : no" function short_integer__ref___projection
 
 val short_integer__havoc 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__short_integer.short_integer) : int =
  (Standard__short_integer.short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content "model_trace:" "name:" : integer }
 
 function integer__ref___projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref___projection
 
 meta "inline : no" function integer__ref___projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref =
  { mutable long_integer__content "model_trace:" "name:" : long_integer }
 
 function long_integer__ref___projection 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref___projection
 
 meta "inline : no" function long_integer__ref___projection
 
 val long_integer__havoc 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__long_integer.long_integer) : int =
  (Standard__long_integer.long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref =
  { mutable long_long_integer__content "model_trace:" "name:" : long_long_integer }
 
 function long_long_integer__ref___projection 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref___projection
 
 meta "inline : no" function long_long_integer__ref___projection
 
 val long_long_integer__havoc 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__long_long_integer.long_long_integer) : int =
  (Standard__long_long_integer.long_long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use import "_gnatprove_standard".Main
 use import "int".Int

 type natural =
  < range 0 2147483647 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref =
  { mutable natural__content "model_trace:" "name:" : natural }
 
 function natural__ref___projection 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref___projection
 
 meta "inline : no" function natural__ref___projection
 
 val natural__havoc 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__natural.natural) : int =
  (Standard__natural.natural'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use import "_gnatprove_standard".Main
 use import "int".Int

 type positive =
  < range 1 2147483647 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content "model_trace:" "name:" : positive }
 
 function positive__ref___projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref___projection
 
 meta "inline : no" function positive__ref___projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__positive.positive) : int =
  (Standard__positive.positive'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type short_float 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref =
  { mutable short_float__content "model_trace:" "name:" : short_float }
 
 function short_float__ref___projection 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref___projection
 
 meta "inline : no" function short_float__ref___projection
 
 val short_float__havoc 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type float 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float__ref =
  { mutable float__content "model_trace:" "name:" : float }
 
 function float__ref___projection 
   (a : float__ref) : float =
  a.float__content
 
 meta "model_projection" function float__ref___projection
 
 meta "inline : no" function float__ref___projection
 
 val float__havoc 
   (x : float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__float.float, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64

 type long_float 
 
 function first 
   : Float64.t =
  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t))
 
 function last 
   : Float64.t =
  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)
 
 predicate in_range 
   (x : Float64.t)  =
  (Float64.t'isFinite x)
 
 clone export "ada__model".Static_Float64 with
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref =
  { mutable long_float__content "model_trace:" "name:" : long_float }
 
 function long_float__ref___projection 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref___projection
 
 meta "inline : no" function long_float__ref___projection
 
 val long_float__havoc 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float
 use        "_gnatprove_standard".Float64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float64 with
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  255
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content "model_trace:" "name:" : character }
 
 function character__ref___projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref___projection
 
 meta "inline : no" function character__ref___projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  65535
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref =
  { mutable wide_character__content "model_trace:" "name:" : wide_character }
 
 function wide_character__ref___projection 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref___projection
 
 meta "inline : no" function wide_character__ref___projection
 
 val wide_character__havoc 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_wide_character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref =
  { mutable wide_wide_character__content "model_trace:" "name:" : wide_wide_character }
 
 function wide_wide_character__ref___projection 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref___projection
 
 meta "inline : no" function wide_wide_character__ref___projection
 
 val wide_wide_character__havoc 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Standard__character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character__rep
 use        Array__Int__Standard__character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__character.component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get, 
 function bool_eq = Array__Int__Standard__character.bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main
 use        Standard__integer
 use        Standard__positive
 use        Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 function to_string 
   (x : Main.__image) : string
 
 function from_string 
   (x : string) : Main.__image
 
 type string__ref =
  { mutable string__content "model_trace:" "name:" : string }
 
 function string__ref___projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref___projection
 
 meta "inline : no" function string__ref___projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character
 use        Standard__wide_character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_98   : int.
   (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_98   : int.
    (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__wide_character.component_type, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character__rep
 use        Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__wide_character.component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_character.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_character

 type component_type =
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_string__ref =
  { mutable wide_string__content "model_trace:" "name:" : wide_string }
 
 function wide_string__ref___projection 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref___projection
 
 meta "inline : no" function wide_string__ref___projection
 
 val wide_string__havoc 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character
 use        Standard__wide_wide_character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_105   : int.
   (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_105   : int.
    (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_wide_character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_wide_character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character__rep
 use        Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_wide_character.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character

 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_wide_string__ref =
  { mutable wide_wide_string__content "model_trace:" "name:" : wide_wide_string }
 
 function wide_wide_string__ref___projection 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref___projection
 
 meta "inline : no" function wide_wide_string__ref___projection
 
 val wide_wide_string__havoc 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for fixed-point operation for type at system.ads:1, created in Why.Gen.Scalars.Create_Fixed_Point_Theory_If_Needed *)
module Fixed_Point__1_1000000000
 use import "_gnatprove_standard".Main
 use import "int".Int

 function num_small 
   : int =
  1
 
 function den_small 
   : int =
  1000000000
 
 clone export "ada__model".Fixed_Point_Rep with
 function num_small = num_small, 
 function den_small = den_small

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main

 type duration 
 
 function num_small 
   : Main.__fixed =
  1
 
 function den_small 
   : Main.__fixed =
  1000000000
 
 function first 
   : Main.__fixed =
  ( -9223372036854775808 )
 
 function last 
   : Main.__fixed =
  9223372036854775807
 
 predicate in_range 
   (x : Main.__fixed)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Fixed_Point with
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type duration__ref =
  { mutable duration__content "model_trace:" "name:" : duration }
 
 function duration__ref___projection 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref___projection
 
 meta "inline : no" function duration__ref___projection
 
 val duration__havoc 
   (x : duration__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_8 =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content "model_trace:" "name:" : integer_8 }
 
 function integer_8__ref___projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref___projection
 
 meta "inline : no" function integer_8__ref___projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_8.integer_8) : int =
  (Standard__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content "model_trace:" "name:" : integer_16 }
 
 function integer_16__ref___projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref___projection
 
 meta "inline : no" function integer_16__ref___projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_16.integer_16) : int =
  (Standard__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content "model_trace:" "name:" : integer_32 }
 
 function integer_32__ref___projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref___projection
 
 meta "inline : no" function integer_32__ref___projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_32.integer_32) : int =
  (Standard__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content "model_trace:" "name:" : integer_64 }
 
 function integer_64__ref___projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref___projection
 
 meta "inline : no" function integer_64__ref___projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_64.integer_64) : int =
  (Standard__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type universal_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref =
  { mutable universal_integer__content "model_trace:" "name:" : universal_integer }
 
 function universal_integer__ref___projection 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref___projection
 
 meta "inline : no" function universal_integer__ref___projection
 
 val universal_integer__havoc 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__universal_integer.universal_integer) : int =
  (Standard__universal_integer.universal_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "T1s" defined at funciones.ads:3, created in Gnat2Why.Types.Translate_Type *)
module Funciones__T1s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 function first 
   : int =
  1
 
 function last 
   : int =
  16
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "hex" defined at funciones.ads:3, created in Gnat2Why.Decls.Translate_Constant *)
module Funciones__hex
 use import "_gnatprove_standard".Main
 use        Standard__string

 function hex #"funciones.ads" 3 0 0#"model_projected" "model_trace:2768" "name:hex" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for axiomatizing type "binary_values" defined at funciones.ads:4, created in Gnat2Why.Types.Translate_Type *)
module Funciones__binary_values
 use import "_gnatprove_standard".Main
 use import "int".Int

 type binary_values =
  < range 0 1 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  1
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = binary_values, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type binary_values__ref =
  { mutable binary_values__content "model_trace:" "name:" : binary_values }
 
 function binary_values__ref___projection 
   (a : binary_values__ref) : binary_values =
  a.binary_values__content
 
 meta "model_projection" function binary_values__ref___projection
 
 meta "inline : no" function binary_values__ref___projection
 
 val binary_values__havoc 
   (x : binary_values__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "binary_values" defined at funciones.ads:4, created in Gnat2Why.Types.Translate_Type *)
module Funciones__binary_values__rep
 use        Funciones__binary_values
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Funciones__binary_values.binary_values) : int =
  (Funciones__binary_values.binary_values'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Funciones__binary_values.binary_values, 
 predicate in_range = Funciones__binary_values.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "TbinarioD1" defined at funciones.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Funciones__TbinarioD1
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tbinarioD1 =
  < range 0 31 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  31
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tbinarioD1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tbinarioD1__ref =
  { mutable tbinarioD1__content "model_trace:" "name:" : tbinarioD1 }
 
 function tbinarioD1__ref___projection 
   (a : tbinarioD1__ref) : tbinarioD1 =
  a.tbinarioD1__content
 
 meta "model_projection" function tbinarioD1__ref___projection
 
 meta "inline : no" function tbinarioD1__ref___projection
 
 val tbinarioD1__havoc 
   (x : tbinarioD1__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TbinarioD1" defined at funciones.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Funciones__TbinarioD1__rep
 use        Funciones__TbinarioD1
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Funciones__TbinarioD1.tbinarioD1) : int =
  (Funciones__TbinarioD1.tbinarioD1'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Funciones__TbinarioD1.tbinarioD1, 
 predicate in_range = Funciones__TbinarioD1.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "TbinarioB" defined at funciones.ads:5, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Funciones__binary_values
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Funciones__binary_values
 use        Funciones__binary_values__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Funciones__binary_values.binary_values
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_155   : int.
   (if (( (a__first <= temp___idx_155) /\ (temp___idx_155 <= a__last) )) then (
    ((Funciones__binary_values__rep.to_rep (get a temp___idx_155)) = (Funciones__binary_values__rep.to_rep (get b ((b__first - a__first) + temp___idx_155))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_155   : int.
    (if (( (a__first <= temp___idx_155) /\ (temp___idx_155 <= a__last) )) then (
     ((Funciones__binary_values__rep.to_rep (get a temp___idx_155)) = (Funciones__binary_values__rep.to_rep (get b ((b__first - a__first) + temp___idx_155))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "TbinarioB" defined at funciones.ads:5, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Funciones__binary_values__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Funciones__binary_values

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Funciones__binary_values.component_type, 
 type map = Array__Int__Funciones__binary_values.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Funciones__binary_values.get

end

(* Module for axiomatizing comparison for the array theory associated to type "TbinarioB" defined at funciones.ads:5, created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Funciones__binary_values_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Funciones__binary_values__rep
 use        Array__Int__Funciones__binary_values

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Funciones__binary_values.component_type, 
 function to_rep = Funciones__binary_values__rep.to_rep, 
 type map = Array__Int__Funciones__binary_values.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Funciones__binary_values.get, 
 function bool_eq = Array__Int__Funciones__binary_values.bool_eq

end

(* Module for axiomatizing type "TbinarioB" defined at funciones.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Funciones__TbinarioB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep
 use        Funciones__binary_values
 use        Funciones__TbinarioD1
 use        Array__Int__Funciones__binary_values

 type component_type =
  Funciones__binary_values.binary_values
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Funciones__binary_values.map, 
 function array_bool_eq = Array__Int__Funciones__binary_values.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Funciones__TbinarioD1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tbinarioB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type tbinarioB__ref =
  { mutable tbinarioB__content "model_trace:" "name:" : tbinarioB }
 
 function tbinarioB__ref___projection 
   (a : tbinarioB__ref) : tbinarioB =
  a.tbinarioB__content
 
 meta "model_projection" function tbinarioB__ref___projection
 
 meta "inline : no" function tbinarioB__ref___projection
 
 val tbinarioB__havoc 
   (x : tbinarioB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "binario" defined at funciones.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Funciones__binario
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Funciones__binary_values
 use        Array__Int__Funciones__binary_values

 type component_type =
  Funciones__binary_values.binary_values
 
 function first 
   : int =
  0
 
 function last 
   : int =
  31
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Funciones__binary_values.map, 
 function array_bool_eq = Array__Int__Funciones__binary_values.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "ThbinarioD1" defined at funciones.ads:6, created in Gnat2Why.Types.Translate_Type *)
module Funciones__ThbinarioD1
 use import "_gnatprove_standard".Main
 use import "int".Int

 type thbinarioD1 =
  < range 0 15 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  15
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = thbinarioD1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type thbinarioD1__ref =
  { mutable thbinarioD1__content "model_trace:" "name:" : thbinarioD1 }
 
 function thbinarioD1__ref___projection 
   (a : thbinarioD1__ref) : thbinarioD1 =
  a.thbinarioD1__content
 
 meta "model_projection" function thbinarioD1__ref___projection
 
 meta "inline : no" function thbinarioD1__ref___projection
 
 val thbinarioD1__havoc 
   (x : thbinarioD1__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "ThbinarioD1" defined at funciones.ads:6, created in Gnat2Why.Types.Translate_Type *)
module Funciones__ThbinarioD1__rep
 use        Funciones__ThbinarioD1
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Funciones__ThbinarioD1.thbinarioD1) : int =
  (Funciones__ThbinarioD1.thbinarioD1'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Funciones__ThbinarioD1.thbinarioD1, 
 predicate in_range = Funciones__ThbinarioD1.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "ThbinarioB" defined at funciones.ads:6, created in Gnat2Why.Types.Translate_Type *)
module Funciones__ThbinarioB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep
 use        Funciones__binary_values
 use        Array__Int__Funciones__binary_values
 use        Funciones__ThbinarioD1

 type component_type =
  Funciones__binary_values.binary_values
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Funciones__binary_values.map, 
 function array_bool_eq = Array__Int__Funciones__binary_values.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Funciones__ThbinarioD1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type thbinarioB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type thbinarioB__ref =
  { mutable thbinarioB__content "model_trace:" "name:" : thbinarioB }
 
 function thbinarioB__ref___projection 
   (a : thbinarioB__ref) : thbinarioB =
  a.thbinarioB__content
 
 meta "model_projection" function thbinarioB__ref___projection
 
 meta "inline : no" function thbinarioB__ref___projection
 
 val thbinarioB__havoc 
   (x : thbinarioB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "hbinario" defined at funciones.ads:6, created in Gnat2Why.Types.Translate_Type *)
module Funciones__hbinario
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Funciones__binary_values
 use        Array__Int__Funciones__binary_values

 type component_type =
  Funciones__binary_values.binary_values
 
 function first 
   : int =
  0
 
 function last 
   : int =
  15
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Funciones__binary_values.map, 
 function array_bool_eq = Array__Int__Funciones__binary_values.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "n1" defined at funciones.ads:15, created in Gnat2Why.Decls.Translate_Constant *)
module Funciones__dectobin__n1
 use import "_gnatprove_standard".Main

 function n1 #"funciones.ads" 15 0 0#"model" "model_trace:2827" "name:n1" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "n1" defined at funciones.ads:15, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Funciones__dectobin__n1___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "dectobin" defined at funciones.ads:15, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Funciones__dectobin
 use import "_gnatprove_standard".Main
 use        Array__Int__Funciones__binary_values

 function dectobin 
   (n1 : int) : Array__Int__Funciones__binary_values.map
 
 predicate dectobin__function_guard 
   (result : Array__Int__Funciones__binary_values.map) (n1 : int) 

end

(* Module for defining the constant "n1" defined at funciones.ads:24, created in Gnat2Why.Decls.Translate_Constant *)
module Funciones__dectohex16__n1
 use import "_gnatprove_standard".Main

 function n1 #"funciones.ads" 24 0 0#"model" "name:n1" "model_trace:2853" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "n1" defined at funciones.ads:24, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Funciones__dectohex16__n1___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "dectohex16" defined at funciones.ads:24, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Funciones__dectohex16
 use import "_gnatprove_standard".Main
 use        Standard__string

 function dectohex16 
   (n1 : int) : Standard__string.string
 
 predicate dectohex16__function_guard 
   (result : Standard__string.string) (n1 : int) 

end

(* Module for axiomatizing type "T1b" defined at funciones.adb:95, created in Gnat2Why.Types.Translate_Type *)
module Funciones__dectobin__T1b
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t1b =
  < range 0 15 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  15
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t1b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t1b__ref =
  { mutable t1b__content "model_trace:" "name:" : t1b }
 
 function t1b__ref___projection 
   (a : t1b__ref) : t1b =
  a.t1b__content
 
 meta "model_projection" function t1b__ref___projection
 
 meta "inline : no" function t1b__ref___projection
 
 val t1b__havoc 
   (x : t1b__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T1b" defined at funciones.adb:95, created in Gnat2Why.Types.Translate_Type *)
module Funciones__dectobin__T1b__rep
 use        Funciones__dectobin__T1b
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Funciones__dectobin__T1b.t1b) : int =
  (Funciones__dectobin__T1b.t1b'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Funciones__dectobin__T1b.t1b, 
 predicate in_range = Funciones__dectobin__T1b.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "T2b" defined at funciones.adb:95, created in Gnat2Why.Types.Translate_Type *)
module Funciones__dectobin__T2b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Funciones__binary_values
 use        Array__Int__Funciones__binary_values

 type component_type =
  Funciones__binary_values.binary_values
 
 function first 
   : int =
  0
 
 function last 
   : int =
  15
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Funciones__binary_values.map, 
 function array_bool_eq = Array__Int__Funciones__binary_values.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T6b" defined at funciones.adb:112, created in Gnat2Why.Types.Translate_Type *)
module Funciones__dectobin__L_1__L5b__T6b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t6b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t6b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t6b__ref =
  { mutable t6b__content "model_trace:" "name:" : t6b }
 
 function t6b__ref___projection 
   (a : t6b__ref) : t6b =
  a.t6b__content
 
 meta "model_projection" function t6b__ref___projection
 
 meta "inline : no" function t6b__ref___projection
 
 val t6b__havoc 
   (x : t6b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T4b" defined at funciones.adb:112, created in Gnat2Why.Types.Translate_Type *)
module Funciones__dectobin__L_1__L3b__T4b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t4b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t4b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t4b__ref =
  { mutable t4b__content "model_trace:" "name:" : t4b }
 
 function t4b__ref___projection 
   (a : t4b__ref) : t4b =
  a.t4b__content
 
 meta "model_projection" function t4b__ref___projection
 
 meta "inline : no" function t4b__ref___projection
 
 val t4b__havoc 
   (x : t4b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TTresSP1" defined at funciones.adb:142, created in Gnat2Why.Types.Translate_Type *)
module Funciones__dectohex16__TTresSP1
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tTresSP1 =
  < range 1 4 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  4
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tTresSP1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tTresSP1__ref =
  { mutable tTresSP1__content "model_trace:" "name:" : tTresSP1 }
 
 function tTresSP1__ref___projection 
   (a : tTresSP1__ref) : tTresSP1 =
  a.tTresSP1__content
 
 meta "model_projection" function tTresSP1__ref___projection
 
 meta "inline : no" function tTresSP1__ref___projection
 
 val tTresSP1__havoc 
   (x : tTresSP1__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TTresSP1" defined at funciones.adb:142, created in Gnat2Why.Types.Translate_Type *)
module Funciones__dectohex16__TTresSP1__rep
 use        Funciones__dectohex16__TTresSP1
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Funciones__dectohex16__TTresSP1.tTresSP1) : int =
  (Funciones__dectohex16__TTresSP1.tTresSP1'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Funciones__dectohex16__TTresSP1.tTresSP1, 
 predicate in_range = Funciones__dectohex16__TTresSP1.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "TresS" defined at funciones.adb:142, created in Gnat2Why.Types.Translate_Type *)
module Funciones__dectohex16__TresS
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 function first 
   : int =
  1
 
 function last 
   : int =
  4
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T8b" defined at funciones.adb:150, created in Gnat2Why.Types.Translate_Type *)
module Funciones__dectohex16__T8b
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t8b =
  < range 1 4 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  4
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t8b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t8b__ref =
  { mutable t8b__content "model_trace:" "name:" : t8b }
 
 function t8b__ref___projection 
   (a : t8b__ref) : t8b =
  a.t8b__content
 
 meta "model_projection" function t8b__ref___projection
 
 meta "inline : no" function t8b__ref___projection
 
 val t8b__havoc 
   (x : t8b__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T8b" defined at funciones.adb:150, created in Gnat2Why.Types.Translate_Type *)
module Funciones__dectohex16__T8b__rep
 use        Funciones__dectohex16__T8b
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Funciones__dectohex16__T8b.t8b) : int =
  (Funciones__dectohex16__T8b.t8b'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Funciones__dectohex16__T8b.t8b, 
 predicate in_range = Funciones__dectohex16__T8b.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "T9b" defined at funciones.adb:150, created in Gnat2Why.Types.Translate_Type *)
module Funciones__dectohex16__T9b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 function first 
   : int =
  1
 
 function last 
   : int =
  4
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T13b" defined at funciones.adb:187, created in Gnat2Why.Types.Translate_Type *)
module Funciones__dectohex16__L_2__L12b__T13b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t13b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t13b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t13b__ref =
  { mutable t13b__content "model_trace:" "name:" : t13b }
 
 function t13b__ref___projection 
   (a : t13b__ref) : t13b =
  a.t13b__content
 
 meta "model_projection" function t13b__ref___projection
 
 meta "inline : no" function t13b__ref___projection
 
 val t13b__havoc 
   (x : t13b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T11b" defined at funciones.adb:187, created in Gnat2Why.Types.Translate_Type *)
module Funciones__dectohex16__L_2__L10b__T11b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t11b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t11b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t11b__ref =
  { mutable t11b__content "model_trace:" "name:" : t11b }
 
 function t11b__ref___projection 
   (a : t11b__ref) : t11b =
  a.t11b__content
 
 meta "model_projection" function t11b__ref___projection
 
 meta "inline : no" function t11b__ref___projection
 
 val t11b__havoc 
   (x : t11b__ref) : unit
  writes {x}

end
(* Module for defining a ref holding the value of variable "res" defined at funciones.adb:88, created in Gnat2Why.Decls.Translate_Variable *)
module Funciones__dectobin__res
 use import "_gnatprove_standard".Main
 use        Array__Int__Funciones__binary_values

 val res #"funciones.adb" 88 0 0#"model_projected" "model_trace:2326" "name:res"  : Array__Int__Funciones__binary_values.map__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "res" defined at funciones.adb:88, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Funciones__dectobin__res___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pos" defined at funciones.adb:89, created in Gnat2Why.Decls.Translate_Variable *)
module Funciones__dectobin__pos
 use import "_gnatprove_standard".Main

 val pos #"funciones.adb" 89 0 0#"model_projected" "model_trace:2335" "name:pos"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "pos" defined at funciones.adb:89, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Funciones__dectobin__pos___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "temp" defined at funciones.adb:90, created in Gnat2Why.Decls.Translate_Variable *)
module Funciones__dectobin__temp
 use import "_gnatprove_standard".Main

 val temp #"funciones.adb" 90 0 0#"model_projected" "model_trace:2345" "name:temp"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "temp" defined at funciones.adb:90, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Funciones__dectobin__temp___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "res" defined at funciones.adb:142, created in Gnat2Why.Decls.Translate_Variable *)
module Funciones__dectohex16__res
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character

 val res #"funciones.adb" 142 0 0#"model_projected" "name:res" "model_trace:2493"  : Array__Int__Standard__character.map__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "res" defined at funciones.adb:142, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Funciones__dectohex16__res___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pos" defined at funciones.adb:143, created in Gnat2Why.Decls.Translate_Variable *)
module Funciones__dectohex16__pos
 use import "_gnatprove_standard".Main

 val pos #"funciones.adb" 143 0 0#"model_projected" "name:pos" "model_trace:2507"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "pos" defined at funciones.adb:143, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Funciones__dectohex16__pos___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "temp" defined at funciones.adb:144, created in Gnat2Why.Decls.Translate_Variable *)
module Funciones__dectohex16__temp
 use import "_gnatprove_standard".Main

 val temp #"funciones.adb" 144 0 0#"model_projected" "name:temp" "model_trace:2517"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "temp" defined at funciones.adb:144, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Funciones__dectohex16__temp___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "let" defined at funciones.adb:145, created in Gnat2Why.Decls.Translate_Variable *)
module Funciones__dectohex16__let
 use import "_gnatprove_standard".Main

 val let__ #"funciones.adb" 145 0 0#"model_projected" "model_trace:2527" "name:let"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "let" defined at funciones.adb:145, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Funciones__dectohex16__let___axiom
 use import "_gnatprove_standard".Main


end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_short_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool)  =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_4)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool)  =
  true

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool)  =
  (if (( temp___is_init_7 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_11)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool)  =
  true

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer

 predicate dynamic_invariant "inline" 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool)  =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool)  =
  true

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool)  =
  (if (( temp___is_init_21 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_25)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool)  =
  true

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_long_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool)  =
  (if (( temp___is_init_28 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_32)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool)  =
  true

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural

 predicate dynamic_invariant "inline" 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool)  =
  (if (( temp___is_init_35 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_39)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool)  =
  true

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__positive

 predicate dynamic_invariant "inline" 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool)  =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool)  =
  true

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__short_float

 predicate dynamic_invariant "inline" 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool)  =
  (if (( temp___is_init_49 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_53)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool)  =
  true

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float

 predicate dynamic_invariant "inline" 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool)  =
  (if (( temp___is_init_56 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_60)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool)  =
  true

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64
 use        Standard__long_float

 predicate dynamic_invariant "inline" 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool)  =
  (if (( temp___is_init_63 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_67)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool)  =
  true

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character

 predicate dynamic_invariant "inline" 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool)  =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool)  =
  true

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character

 predicate dynamic_invariant "inline" 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool)  =
  (if (( temp___is_init_77 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_81)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool)  =
  true

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character

 predicate dynamic_invariant "inline" 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool)  =
  (if (( temp___is_init_84 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_88)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool)  =
  true

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__positive

 predicate dynamic_invariant "inline" 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool)  =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_string

 predicate dynamic_invariant "inline" 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool)  =
  (if (temp___skip_constant_100) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_103) (Standard__wide_string.last temp___expr_103))))

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_wide_string

 predicate dynamic_invariant "inline" 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool)  =
  (if (temp___skip_constant_107) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_110) (Standard__wide_wide_string.last temp___expr_110))))

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use import "_gnatprove_standard".Main
 use        Standard__duration

 predicate dynamic_invariant "inline" 
   (temp___expr_116 : Standard__duration.duration) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_117 : Standard__duration.duration) (temp___skip_top_level_118 : bool)  =
  true

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_8

 predicate dynamic_invariant "inline" 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool)  =
  (if (( temp___is_init_119 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_123)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool)  =
  true

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_16

 predicate dynamic_invariant "inline" 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool)  =
  (if (( temp___is_init_126 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_130)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool)  =
  true

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_32

 predicate dynamic_invariant "inline" 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool)  =
  (if (( temp___is_init_133 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_137)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool)  =
  true

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_64

 predicate dynamic_invariant "inline" 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool)  =
  (if (( temp___is_init_140 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_144)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool)  =
  true

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__universal_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool)  =
  (if (( temp___is_init_147 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_151)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool)  =
  true

end

(* Module for defining a value for string literal  defined at funciones.ads:3, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_154
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Standard__character__rep
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character

 function temp___String_Literal_154 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_154__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_154 __void_param)].
   ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_154 __void_param) 1)) = 48) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_154 __void_param) 2)) = 49) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_154 __void_param) 3)) = 50) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_154 __void_param) 4)) = 51) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_154 __void_param) 5)) = 52) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_154 __void_param) 6)) = 53) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_154 __void_param) 7)) = 54) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_154 __void_param) 8)) = 55) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_154 __void_param) 9)) = 56) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_154 __void_param) 10)) = 57) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_154 __void_param) 11)) = 65) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_154 __void_param) 12)) = 66) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_154 __void_param) 13)) = 67) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_154 __void_param) 14)) = 68) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_154 __void_param) 15)) = 69) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_154 __void_param) 16)) = 70) ))

end

(* Module for defining the loop exit exception for the loop "L_1" defined at funciones.adb:97, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Funciones__dectobin__L_1
 use import "_gnatprove_standard".Main

 exception L_1

end

(* Module giving an empty axiom for the entity "L_1" defined at funciones.adb:97, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Funciones__dectobin__L_1___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the loop exit exception for the loop "L_2" defined at funciones.adb:152, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Funciones__dectohex16__L_2
 use import "_gnatprove_standard".Main

 exception L_2

end

(* Module giving an empty axiom for the entity "L_2" defined at funciones.adb:152, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Funciones__dectohex16__L_2___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T1s" defined at funciones.ads:3, created in Gnat2Why.Types.Generate_Type_Completion *)
module Funciones__T1s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "binary_values" defined at funciones.ads:4, created in Gnat2Why.Types.Generate_Type_Completion *)
module Funciones__binary_values___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Funciones__binary_values

 predicate dynamic_invariant "inline" 
   (temp___expr_160 : int) (temp___is_init_156 : bool) (temp___skip_constant_157 : bool) (temp___do_toplevel_158 : bool) (temp___do_typ_inv_159 : bool)  =
  (if (( temp___is_init_156 \/ (Funciones__binary_values.first <= Funciones__binary_values.last) )) then (
   (Funciones__binary_values.dynamic_property Funciones__binary_values.first Funciones__binary_values.last temp___expr_160)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_161 : int) (temp___skip_top_level_162 : bool)  =
  true

end

(* Module giving axioms for type "TbinarioD1" defined at funciones.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Funciones__TbinarioD1___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "TbinarioB" defined at funciones.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Funciones__TbinarioB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "binario" defined at funciones.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Funciones__binario___axiom
 use import "_gnatprove_standard".Main
 use        Array__Int__Funciones__binary_values
 use        Array__Int__Funciones__binary_values

 predicate dynamic_invariant "inline" 
   (temp___expr_167 : Array__Int__Funciones__binary_values.map) (temp___is_init_163 : bool) (temp___skip_constant_164 : bool) (temp___do_toplevel_165 : bool) (temp___do_typ_inv_166 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_169 : Array__Int__Funciones__binary_values.map) (temp___skip_top_level_170 : bool)  =
  true

end

(* Module giving axioms for type "ThbinarioD1" defined at funciones.ads:6, created in Gnat2Why.Types.Generate_Type_Completion *)
module Funciones__ThbinarioD1___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "ThbinarioB" defined at funciones.ads:6, created in Gnat2Why.Types.Generate_Type_Completion *)
module Funciones__ThbinarioB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "hbinario" defined at funciones.ads:6, created in Gnat2Why.Types.Generate_Type_Completion *)
module Funciones__hbinario___axiom
 use import "_gnatprove_standard".Main
 use        Array__Int__Funciones__binary_values
 use        Array__Int__Funciones__binary_values

 predicate dynamic_invariant "inline" 
   (temp___expr_177 : Array__Int__Funciones__binary_values.map) (temp___is_init_173 : bool) (temp___skip_constant_174 : bool) (temp___do_toplevel_175 : bool) (temp___do_typ_inv_176 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_179 : Array__Int__Funciones__binary_values.map) (temp___skip_top_level_180 : bool)  =
  true

end

(* Module giving axioms for type "T1b" defined at funciones.adb:95, created in Gnat2Why.Types.Generate_Type_Completion *)
module Funciones__dectobin__T1b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T2b" defined at funciones.adb:95, created in Gnat2Why.Types.Generate_Type_Completion *)
module Funciones__dectobin__T2b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T6b" defined at funciones.adb:112, created in Gnat2Why.Types.Generate_Type_Completion *)
module Funciones__dectobin__L_1__L5b__T6b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T4b" defined at funciones.adb:112, created in Gnat2Why.Types.Generate_Type_Completion *)
module Funciones__dectobin__L_1__L3b__T4b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "TTresSP1" defined at funciones.adb:142, created in Gnat2Why.Types.Generate_Type_Completion *)
module Funciones__dectohex16__TTresSP1___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "TresS" defined at funciones.adb:142, created in Gnat2Why.Types.Generate_Type_Completion *)
module Funciones__dectohex16__TresS___axiom
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character

 predicate dynamic_invariant "inline" 
   (temp___expr_191 : Array__Int__Standard__character.map) (temp___is_init_187 : bool) (temp___skip_constant_188 : bool) (temp___do_toplevel_189 : bool) (temp___do_typ_inv_190 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_193 : Array__Int__Standard__character.map) (temp___skip_top_level_194 : bool)  =
  true

end

(* Module giving axioms for type "T8b" defined at funciones.adb:150, created in Gnat2Why.Types.Generate_Type_Completion *)
module Funciones__dectohex16__T8b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T9b" defined at funciones.adb:150, created in Gnat2Why.Types.Generate_Type_Completion *)
module Funciones__dectohex16__T9b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T13b" defined at funciones.adb:187, created in Gnat2Why.Types.Generate_Type_Completion *)
module Funciones__dectohex16__L_2__L12b__T13b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T11b" defined at funciones.adb:187, created in Gnat2Why.Types.Generate_Type_Completion *)
module Funciones__dectohex16__L_2__L10b__T11b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for declaring an abstract function for the aggregate at funciones.adb:95, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_197
 use import "_gnatprove_standard".Main
 use        Array__Int__Funciones__binary_values

 function temp_____aggregate_def_197 
   (temp___199 : int) : Array__Int__Funciones__binary_values.map

end

(* Module for declaring an abstract function for the aggregate at funciones.adb:150, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_207
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character

 function temp_____aggregate_def_207 
   (temp___209 : int) : Array__Int__Standard__character.map

end
(* Module for defining the value of constant "hex" defined at funciones.ads:3, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Funciones__hex___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__string
 use        Funciones__hex
 use        Temp___String_Literal_154
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character

 axiom hex__def_axiom :
  ((Funciones__hex.hex ) = (Standard__string.of_array (Temp___String_Literal_154.temp___String_Literal_154 ()) 1 16))

end

(* Module for declaring a program function (and possibly an axiom) for "dectobin" defined at funciones.ads:15, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Funciones__dectobin___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer___axiom
 use        Funciones__dectobin
 use        Funciones__hbinario___axiom
 use        Array__Int__Funciones__binary_values

 val dectobin 
   (n1 : int) : Array__Int__Funciones__binary_values.map
  requires {  (n1 >= 0) }
  ensures {  ( ( (result = (Funciones__dectobin.dectobin n1)) /\ (Funciones__dectobin.dectobin__function_guard result n1) ) /\ (Funciones__hbinario___axiom.dynamic_invariant result True False True True) ) }
 
 axiom dectobin__post_axiom :
  (forall n1   : int [(Funciones__dectobin.dectobin n1)].
   ( ( (Standard__integer___axiom.dynamic_invariant n1 True True True True) /\ (n1 >= 0) ) -> (let result = (Funciones__dectobin.dectobin n1) in (
    (if ((Funciones__dectobin.dectobin__function_guard result n1)) then (
     ( ( true /\ (Funciones__hbinario___axiom.dynamic_invariant result True False True True) ) /\ true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "dectohex16" defined at funciones.ads:24, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Funciones__dectohex16___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__string
 use        Standard__integer___axiom
 use        Standard__string___axiom
 use        Funciones__dectohex16

 val dectohex16 
   (n1 : int) : Standard__string.string
  requires {  (n1 >= 0) }
  ensures {  ( ( (result = (Funciones__dectohex16.dectohex16 n1)) /\ (Funciones__dectohex16.dectohex16__function_guard result n1) ) /\ (Standard__string___axiom.dynamic_invariant result True False True True) ) }
 
 axiom dectohex16__post_axiom :
  (forall n1   : int [(Funciones__dectohex16.dectohex16 n1)].
   ( ( (Standard__integer___axiom.dynamic_invariant n1 True True True True) /\ (n1 >= 0) ) -> (let result = (Funciones__dectohex16.dectohex16 n1) in (
    (if ((Funciones__dectohex16.dectohex16__function_guard result n1)) then (
     ( ( true /\ (Standard__string___axiom.dynamic_invariant result True False True True) ) /\ true )) else true)))
    ))

end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "funciones" defined at funciones.ads:1, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Funciones__package_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__string
 use        Standard__string___axiom
 use        Funciones__hex
 use        Temp___String_Literal_154
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Standard__positive___axiom
 use        Standard__character___axiom
 use        Standard__string___axiom
 use        Standard__integer___axiom
 use        Funciones__hex___axiom

 let def #"funciones.ads" 1 0 0#"GP_Subp:funciones.ads:1" "W:diverges:N" 
   (__void_param : unit)
  requires { #"funciones.ads" 1 0 0# true }
  ensures { #"funciones.ads" 1 0 0# true }
   =
  ( (#"funciones.ads" 1 0 0# ());
  (#"funciones.ads" 3 0 0# ( #"funciones.ads" 3 0 0# abstract ensures {true}(let _ = (Standard__string.of_array((Temp___String_Literal_154.temp___String_Literal_154(()))) (1) (16)) in (
   ()))
   end ;
  #"funciones.ads" 3 0 0# assume { #"funciones.ads" 3 0 0# (Standard__string___axiom.dynamic_invariant Funciones__hex.hex True False True True) } ));
  (#"funciones.ads" 4 0 0# ());
  (#"funciones.ads" 5 0 0# ());
  (#"funciones.ads" 6 0 0# ());
  (#"funciones.ads" 15 0 0# ());
  (#"funciones.ads" 17 0 0# ());
  (#"funciones.ads" 24 0 0# ());
  (#"funciones.ads" 26 0 0# ());
  (#"funciones.ads" 26 0 0# ());
  (#"funciones.ads" 26 0 0# ());
  (#"funciones.ads" 26 0 0# ());
  (#"funciones.ads" 26 0 0# ());
  (#"funciones.ads" 26 0 0# ());
  (#"funciones.adb" 1 0 0# ());
  (#"funciones.adb" 85 0 0# ());
  (#"funciones.adb" 139 0 0# ());
  ( "GP_Sloc:funciones.adb:235:1" (#"funciones.adb" 235 0 0# ()) ) )
end

(* Module for defining the value of the aggregate at funciones.adb:95, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_197___axiom
 use import "_gnatprove_standard".Main
 use        Funciones__binary_values
 use        Funciones__binary_values___axiom
 use        Array__Int__Funciones__binary_values
 use        Temp_____aggregate_def_197
 use        Array__Int__Funciones__binary_values

 axiom def_axiom :
  (forall temp___199   : int.
   (let temp___198 = (Temp_____aggregate_def_197.temp_____aggregate_def_197 temp___199) in (
    (if ((Funciones__binary_values___axiom.dynamic_invariant temp___199 True True True True)) then (
     (forall temp___200   : int.
      ((Array__Int__Funciones__binary_values.get temp___198 temp___200) = ( 0 : Funciones__binary_values.binary_values )))) else true)))
  )

end

(* Module for checking contracts and absence of run-time errors in subprogram "dectobin" defined at funciones.ads:15, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Funciones__dectobin__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Int_Division
 use        "_gnatprove_standard".Boolean
 use        Standard__integer
 use        Standard__integer___axiom
 use        Funciones__binary_values
 use        Funciones__binary_values__rep
 use        Array__Int__Funciones__binary_values
 use        Funciones__ThbinarioD1
 use        Funciones__hbinario___axiom
 use        Funciones__dectobin__n1
 use        Array__Int__Funciones__binary_values
 use        Funciones__dectobin__res
 use        Funciones__dectobin__pos
 use        Funciones__dectobin__temp
 use        Funciones__dectobin__L_1
 use        Array__Int__Funciones__binary_values
 use        Array__Int__Funciones__binary_values
 use        Array__Int__Funciones__binary_values
 use        Temp_____aggregate_def_197
 use        Array__Int__Funciones__binary_values
 use        Array__Int__Funciones__binary_values
 use        Standard__integer___axiom
 use        Standard__integer___axiom
 use        Funciones__dectobin__res___axiom
 use        Funciones__dectobin__pos___axiom
 use        Funciones__dectobin__temp___axiom
 use        Temp_____aggregate_def_197___axiom
 use        Funciones__dectobin__L_1___axiom
 use        Funciones__binary_values___axiom
 use        Funciones__hbinario___axiom
 use        Funciones__dectobin__n1___axiom
 use        Funciones__ThbinarioD1___axiom

 val funciones__dectobin__result "model_projected" "model_trace:2820@result" "name:DectoBin"  : Array__Int__Funciones__binary_values.map__ref 
 
 let def #"funciones.ads" 15 0 0#"W:diverges:N" "GP_Subp:funciones.ads:15" 
   (__void_param : unit)
  requires { #"funciones.ads" 15 0 0# true }
  ensures { #"funciones.ads" 15 0 0# true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram funciones.ads:15 *)
  ;
  #"funciones.ads" 15 0 0# assume { #"funciones.ads" 15 0 0# (Standard__integer___axiom.dynamic_invariant Funciones__dectobin__n1.n1 True False True True) };
  #"funciones.ads" 15 0 0# assume { #"funciones.ads" 15 0 0# true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram funciones.ads:15 *)
  ;
  () (* Check for RTE in the Pre of the subprogram funciones.ads:15 *)
  ;
  #"funciones.ads" 15 0 0# abstract ensures {true}(let _ = (Funciones__dectobin__n1.n1 >= 0) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram funciones.ads:15 *)
  ;
  #"funciones.ads" 15 0 0# assume { #"funciones.ads" 15 0 0# (Funciones__dectobin__n1.n1 >= 0) };
  #"funciones.ads" 15 0 0# try
   ( (#"funciones.adb" 88 0 0# ( #"funciones.adb" 88 0 0# abstract ensures {true}(let _ = () in (
    ()))
    end ;
   #"funciones.adb" 88 0 0# assume { #"funciones.adb" 88 0 0# (Funciones__hbinario___axiom.default_initial_assumption Funciones__dectobin__res.res.Array__Int__Funciones__binary_values.map__content False) };
   #"funciones.adb" 88 0 0# assume { #"funciones.adb" 88 0 0# (Funciones__hbinario___axiom.dynamic_invariant Funciones__dectobin__res.res.Array__Int__Funciones__binary_values.map__content False False True True) } ));
   (#"funciones.adb" 89 0 0# ( #"funciones.adb" 89 0 0# Funciones__dectobin__pos.pos.int__content <- ( 15 );
   #"funciones.adb" 89 0 0# assume { #"funciones.adb" 89 0 0# (Standard__integer___axiom.dynamic_invariant Funciones__dectobin__pos.pos.int__content True False True True) } ));
   (#"funciones.adb" 90 0 0# ( #"funciones.adb" 90 0 0# Funciones__dectobin__temp.temp.int__content <- ( Funciones__dectobin__n1.n1 );
   #"funciones.adb" 90 0 0# assume { #"funciones.adb" 90 0 0# (Standard__integer___axiom.dynamic_invariant Funciones__dectobin__temp.temp.int__content True False True True) } ));
   (#"funciones.adb" 97 0 0# ());
   ( "GP_Sloc:funciones.adb:95:7" (#"funciones.adb" 95 0 0# ()) );
   ( "GP_Sloc:funciones.adb:95:11" (#"funciones.adb" 95 0 0# #"funciones.adb" 95 0 0# Funciones__dectobin__res.res.Array__Int__Funciones__binary_values.map__content <- ( (Temp_____aggregate_def_197.temp_____aggregate_def_197(0)) )) );
   ( "GP_Sloc:funciones.adb:97:22" (#"funciones.adb" 97 0 0# ( () (* Translation of an Ada loop from funciones.adb:97 *)
   ;
   (if ((Funciones__dectobin__pos.pos.int__content >= 0)) then (
    #"funciones.adb" 97 0 0# try
     ( #"funciones.adb" 97 0 0# abstract ensures {true}(let _ = Funciones__dectobin__res.res.Array__Int__Funciones__binary_values.map__content in (
      ()))
      end ;
     (let temp___203 = #"funciones.adb" 97 0 0# (any Array__Int__Funciones__binary_values.map
     ensures {#"funciones.adb" 97 0 0# (result = Funciones__dectobin__res.res.Array__Int__Funciones__binary_values.map__content)} 
     ) in (
      ( #"funciones.adb" 97 0 0# abstract ensures {true}(let _ = Funciones__dectobin__temp.temp.int__content in (
       ()))
       end ;
      (let temp___202 = #"funciones.adb" 97 0 0# (any int
      ensures {#"funciones.adb" 97 0 0# (result = Funciones__dectobin__temp.temp.int__content)} 
      ) in (
       ( #"funciones.adb" 97 0 0# abstract ensures {true}(let _ = Funciones__dectobin__pos.pos.int__content in (
        ()))
        end ;
       (let temp___201 = #"funciones.adb" 97 0 0# (any int
       ensures {#"funciones.adb" 97 0 0# (result = Funciones__dectobin__pos.pos.int__content)} 
       ) in (
        #"funciones.adb" 97 0 0# let temp___205 = { int__content = 0 } in 
         ( () (* First unroling of the loop statements appearing before the loop invariant of loop funciones.adb:97 *)
         ;
         ( "GP_Sloc:funciones.adb:98:13" (#"funciones.adb" 98 0 0# ()) );
         ( "GP_Sloc:funciones.adb:98:10" (#"funciones.adb" 98 0 0# (if (((#"funciones.adb" 98 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Shape:L_1_while__if__cmp__rem" "GP_Sloc:funciones.adb:98:18" "GP_Id:4" "comment:         if temp rem 2 = 0 then
                 ^ funciones.adb:98:18:VC_DIVISION_CHECK" (Int_Division.rem_(Funciones__dectobin__temp.temp.int__content) (2)) )) = 0)) then (
          ( ( "GP_Sloc:funciones.adb:99:13" (#"funciones.adb" 99 0 0# ()) );
          ( "GP_Sloc:funciones.adb:99:17" (#"funciones.adb" 99 0 0# ()) );
          ( "GP_Sloc:funciones.adb:99:22" (#"funciones.adb" 99 0 0# #"funciones.adb" 99 0 0# Funciones__dectobin__res.res.Array__Int__Funciones__binary_values.map__content <- ( (Array__Int__Funciones__binary_values.set(Funciones__dectobin__res.res.Array__Int__Funciones__binary_values.map__content) (( #"funciones.adb" 99 0 0# assert { #"funciones.adb" 99 0 0# (#"funciones.adb" 99 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_1_while__if__res_assign__ixdcomp" "GP_Sloc:funciones.adb:99:17" "GP_Id:3" "comment:            res(pos) := 0;
                ^ funciones.adb:99:17:VC_INDEX_CHECK" ( (Funciones__ThbinarioD1.first <= Funciones__dectobin__pos.pos.int__content) /\ (Funciones__dectobin__pos.pos.int__content <= Funciones__ThbinarioD1.last) ) )) };
          Funciones__dectobin__pos.pos.int__content )) (( 0 : Funciones__binary_values.binary_values ))) )) ) )) else (
          ( "GP_Sloc:funciones.adb:100:10" (if (((#"funciones.adb" 100 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:funciones.adb:100:21" "GP_Reason:VC_DIVISION_CHECK" "GP_Id:2" "comment:         elsif temp rem 2 = 1 then
                    ^ funciones.adb:100:21:VC_DIVISION_CHECK" "GP_Shape:L_1_while__if__cmp__rem" (Int_Division.rem_(Funciones__dectobin__temp.temp.int__content) (2)) )) = 1)) then (
           ( ( "GP_Sloc:funciones.adb:101:13" (#"funciones.adb" 101 0 0# ()) );
           ( "GP_Sloc:funciones.adb:101:17" (#"funciones.adb" 101 0 0# ()) );
           ( "GP_Sloc:funciones.adb:101:22" (#"funciones.adb" 101 0 0# #"funciones.adb" 101 0 0# Funciones__dectobin__res.res.Array__Int__Funciones__binary_values.map__content <- ( (Array__Int__Funciones__binary_values.set(Funciones__dectobin__res.res.Array__Int__Funciones__binary_values.map__content) (( #"funciones.adb" 101 0 0# assert { #"funciones.adb" 101 0 0# (#"funciones.adb" 101 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_1_while__if__res_assign__ixdcomp" "GP_Sloc:funciones.adb:101:17" "GP_Id:1" "comment:            res(pos) := 1;
                ^ funciones.adb:101:17:VC_INDEX_CHECK" ( (Funciones__ThbinarioD1.first <= Funciones__dectobin__pos.pos.int__content) /\ (Funciones__dectobin__pos.pos.int__content <= Funciones__ThbinarioD1.last) ) )) };
           Funciones__dectobin__pos.pos.int__content )) (( 1 : Funciones__binary_values.binary_values ))) )) ) )) else (
           ( "GP_Sloc:funciones.adb:102:10" (if ((Funciones__dectobin__temp.temp.int__content = 1)) then (
            ( ( "GP_Sloc:funciones.adb:103:13" (#"funciones.adb" 103 0 0# ()) );
            ( "GP_Sloc:funciones.adb:103:17" (#"funciones.adb" 103 0 0# ()) );
            ( "GP_Sloc:funciones.adb:103:22" (#"funciones.adb" 103 0 0# #"funciones.adb" 103 0 0# Funciones__dectobin__res.res.Array__Int__Funciones__binary_values.map__content <- ( (Array__Int__Funciones__binary_values.set(Funciones__dectobin__res.res.Array__Int__Funciones__binary_values.map__content) (( #"funciones.adb" 103 0 0# assert { #"funciones.adb" 103 0 0# (#"funciones.adb" 103 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:funciones.adb:103:17" "GP_Reason:VC_INDEX_CHECK" "GP_Id:0" "comment:            res(pos) := 1;
                ^ funciones.adb:103:17:VC_INDEX_CHECK" "GP_Shape:L_1_while__if__res_assign__ixdcomp" ( (Funciones__ThbinarioD1.first <= Funciones__dectobin__pos.pos.int__content) /\ (Funciones__dectobin__pos.pos.int__content <= Funciones__ThbinarioD1.last) ) )) };
            Funciones__dectobin__pos.pos.int__content )) (( 1 : Funciones__binary_values.binary_values ))) )) );
            ( "GP_Sloc:funciones.adb:104:13" (#"funciones.adb" 104 0 0# ()) );
            ( "GP_Sloc:funciones.adb:104:18" (#"funciones.adb" 104 0 0# #"funciones.adb" 104 0 0# Funciones__dectobin__temp.temp.int__content <- ( 0 )) ) )) else (
            ())) ))) )))) );
         ( "GP_Sloc:funciones.adb:107:10" (#"funciones.adb" 107 0 0# ()) );
         ( "GP_Sloc:funciones.adb:107:18" (#"funciones.adb" 107 0 0# ()) );
         ( "GP_Sloc:funciones.adb:107:15" (#"funciones.adb" 107 0 0# #"funciones.adb" 107 0 0# Funciones__dectobin__temp.temp.int__content <- ( (#"funciones.adb" 107 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Sloc:funciones.adb:107:23" "GP_Id:5" "comment:         temp := temp / 2;
                      ^ funciones.adb:107:23:VC_DIVISION_CHECK" "GP_Shape:L_1_while__temp_assign__div" (Int_Division.div_(Funciones__dectobin__temp.temp.int__content) (2)) )) )) );
         ( "GP_Sloc:funciones.adb:108:10" (#"funciones.adb" 108 0 0# ()) );
         ( "GP_Sloc:funciones.adb:108:17" (#"funciones.adb" 108 0 0# ()) );
         ( "GP_Sloc:funciones.adb:108:14" (#"funciones.adb" 108 0 0# #"funciones.adb" 108 0 0# Funciones__dectobin__pos.pos.int__content <- ( (#"funciones.adb" 108 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:funciones.adb:108:21" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Id:6" "comment:         pos := pos - 1;
                    ^ funciones.adb:108:21:VC_OVERFLOW_CHECK" "GP_Shape:L_1_while__pos_assign__sub" (Standard__integer.range_check_((Funciones__dectobin__pos.pos.int__content - 1))) )) )) );
         () (* While loop translating the Ada loop from funciones.adb:97 *)
         ;
          while True do
          invariant { 
           (#"funciones.adb" 111 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:funciones.adb:111:33" "GP_Reason:VC_LOOP_INVARIANT" "GP_Id:7" "comment:         pragma Loop_Invariant (pos in 0 .. 15);
                                ^ funciones.adb:111:33:VC_LOOP_INVARIANT" "GP_Shape:L_1_while__pragargs__in" ( "GP_Pretty_Ada:2428" "GP_Sloc:funciones.adb:111:33" ( (0 <= Funciones__dectobin__pos.pos.int__content) /\ (Funciones__dectobin__pos.pos.int__content <= 15) ) ) ))
           }
          invariant { 
           (#"funciones.adb" 112 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Sloc:funciones.adb:112:33" "GP_Id:10" "comment:         pragma Loop_Invariant ((for all a in reverse 0 .. pos => res(a) <= 0 or res(a) <= 1));
                                ^ funciones.adb:112:33:VC_LOOP_INVARIANT" "GP_Shape:L_1_while__pragargs__forall" (forall a #"funciones.adb" 112 0 0#  "model" "model_trace:2436" "name:a"  : int.
            ( ( (0 <= a) /\ (a <= Funciones__dectobin__pos.pos.int__content) ) -> ( "GP_Pretty_Ada:2453" "GP_Sloc:funciones.adb:112:67" ( ((Funciones__binary_values__rep.to_rep (Array__Int__Funciones__binary_values.get Funciones__dectobin__res.res.Array__Int__Funciones__binary_values.map__content a)) <= 0) \/ ((Funciones__binary_values__rep.to_rep (Array__Int__Funciones__binary_values.get Funciones__dectobin__res.res.Array__Int__Funciones__binary_values.map__content a)) <= 1) ) ) )) ))
           }
          invariant { 
           (#"funciones.adb" 113 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Shape:L_1_while__pragargs__in" "GP_Sloc:funciones.adb:113:33" "GP_Id:11" "comment:         pragma Loop_Invariant (temp in 0 .. n1);
                                ^ funciones.adb:113:33:VC_LOOP_INVARIANT" ( "GP_Pretty_Ada:2464" "GP_Sloc:funciones.adb:113:33" ( (0 <= Funciones__dectobin__temp.temp.int__content) /\ (Funciones__dectobin__temp.temp.int__content <= Funciones__dectobin__n1.n1) ) ) ))
           }
          ( () (* Assume implicit invariants from the loop funciones.adb:97 *)
          ;
           assume {  ( ( ( ( ( ( true /\ (Standard__integer___axiom.dynamic_invariant Funciones__dectobin__pos.pos.int__content False True True True) ) /\ true ) /\ (Standard__integer___axiom.dynamic_invariant Funciones__dectobin__temp.temp.int__content False True True True) ) /\ true ) /\ (Funciones__hbinario___axiom.dynamic_invariant Funciones__dectobin__res.res.Array__Int__Funciones__binary_values.map__content False True True True) ) /\ (forall temp___204   : int.
           (if (( (Funciones__ThbinarioD1.first <= temp___204) /\ (temp___204 <= Funciones__ThbinarioD1.last) )) then (
            (if (( false /\ ( false /\ false ) )) then (
             ((Array__Int__Funciones__binary_values.get Funciones__dectobin__res.res.Array__Int__Funciones__binary_values.map__content temp___204) = (Array__Int__Funciones__binary_values.get temp___203 temp___204))) else (
             true))) else true)) ) };
          () (* Check for absence of RTE in the invariant of loop funciones.adb:97 *)
          ;
           abstract ensures {true}(let _ = (Boolean.andb((0 <= Funciones__dectobin__pos.pos.int__content)) ((Funciones__dectobin__pos.pos.int__content <= 15))) in (
           ()))
           end ;
           abstract ensures {true}(let _ = ( (let a =  (any int
          ) in (
           (if ((Boolean.andb((0 <= a)) ((a <= Funciones__dectobin__pos.pos.int__content)))) then (
             abstract ensures {true}(let _ = (Boolean.orb(((Funciones__binary_values__rep.to_rep((Array__Int__Funciones__binary_values.get(Funciones__dectobin__res.res.Array__Int__Funciones__binary_values.map__content) ((  assert {  (#"funciones.adb" 112 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:funciones.adb:112:71" "GP_Id:8" "comment:         pragma Loop_Invariant ((for all a in reverse 0 .. pos => res(a) <= 0 or res(a) <= 1));
                                                                      ^ funciones.adb:112:71:VC_INDEX_CHECK" "GP_Shape:L_1_while__pragargs__forall__or__cmp__ixdcomp" ( (Funciones__ThbinarioD1.first <= a) /\ (a <= Funciones__ThbinarioD1.last) ) )) };
            a ))))) <= 0)) (((Funciones__binary_values__rep.to_rep((Array__Int__Funciones__binary_values.get(Funciones__dectobin__res.res.Array__Int__Funciones__binary_values.map__content) ((  assert {  (#"funciones.adb" 112 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_1_while__pragargs__forall__or__cmp__ixdcomp" "GP_Sloc:funciones.adb:112:86" "GP_Id:9" "comment:         pragma Loop_Invariant ((for all a in reverse 0 .. pos => res(a) <= 0 or res(a) <= 1));
                                                                                     ^ funciones.adb:112:86:VC_INDEX_CHECK" ( (Funciones__ThbinarioD1.first <= a) /\ (a <= Funciones__ThbinarioD1.last) ) )) };
            a ))))) <= 1))) in (
             ()))
             end ))))
          ;
           (any bool
          requires { true} 
          ensures { ( (result = True) <-> (forall a   "model" "model_trace:2436" "name:a"  : int.
           ( ( (0 <= a) /\ (a <= Funciones__dectobin__pos.pos.int__content) ) -> ( ((Funciones__binary_values__rep.to_rep (Array__Int__Funciones__binary_values.get Funciones__dectobin__res.res.Array__Int__Funciones__binary_values.map__content a)) <= 0) \/ ((Funciones__binary_values__rep.to_rep (Array__Int__Funciones__binary_values.get Funciones__dectobin__res.res.Array__Int__Funciones__binary_values.map__content a)) <= 1) ) )) )} 
          ) ) in (
           ()))
           end ;
           abstract ensures {true}(let _ = (Boolean.andb((0 <= Funciones__dectobin__temp.temp.int__content)) ((Funciones__dectobin__temp.temp.int__content <= Funciones__dectobin__n1.n1))) in (
           ()))
           end ;
           temp___205.int__content <- ( Funciones__dectobin__pos.pos.int__content );
          () (* Loop statements appearing after the loop invariant of loop funciones.adb:97 *)
          ;
          () (* Check for the exit condition and loop statements appearing before the loop invariant of loop funciones.adb:97 *)
          ;
          (if (not ( (Funciones__dectobin__pos.pos.int__content >= 0) )) then (
            raise Funciones__dectobin__L_1.L_1));
          ( "GP_Sloc:funciones.adb:98:13" (#"funciones.adb" 98 0 0# ()) );
          ( "GP_Sloc:funciones.adb:98:10" (#"funciones.adb" 98 0 0# (if (((#"funciones.adb" 98 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Shape:L_1_while__if__cmp__rem" "GP_Sloc:funciones.adb:98:18" "GP_Id:4" "comment:         if temp rem 2 = 0 then
                 ^ funciones.adb:98:18:VC_DIVISION_CHECK" (Int_Division.rem_(Funciones__dectobin__temp.temp.int__content) (2)) )) = 0)) then (
           ( ( "GP_Sloc:funciones.adb:99:13" (#"funciones.adb" 99 0 0# ()) );
           ( "GP_Sloc:funciones.adb:99:17" (#"funciones.adb" 99 0 0# ()) );
           ( "GP_Sloc:funciones.adb:99:22" (#"funciones.adb" 99 0 0# #"funciones.adb" 99 0 0# Funciones__dectobin__res.res.Array__Int__Funciones__binary_values.map__content <- ( (Array__Int__Funciones__binary_values.set(Funciones__dectobin__res.res.Array__Int__Funciones__binary_values.map__content) (( #"funciones.adb" 99 0 0# assert { #"funciones.adb" 99 0 0# (#"funciones.adb" 99 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_1_while__if__res_assign__ixdcomp" "GP_Sloc:funciones.adb:99:17" "GP_Id:3" "comment:            res(pos) := 0;
                ^ funciones.adb:99:17:VC_INDEX_CHECK" ( (Funciones__ThbinarioD1.first <= Funciones__dectobin__pos.pos.int__content) /\ (Funciones__dectobin__pos.pos.int__content <= Funciones__ThbinarioD1.last) ) )) };
           Funciones__dectobin__pos.pos.int__content )) (( 0 : Funciones__binary_values.binary_values ))) )) ) )) else (
           ( "GP_Sloc:funciones.adb:100:10" (if (((#"funciones.adb" 100 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:funciones.adb:100:21" "GP_Reason:VC_DIVISION_CHECK" "GP_Id:2" "comment:         elsif temp rem 2 = 1 then
                    ^ funciones.adb:100:21:VC_DIVISION_CHECK" "GP_Shape:L_1_while__if__cmp__rem" (Int_Division.rem_(Funciones__dectobin__temp.temp.int__content) (2)) )) = 1)) then (
            ( ( "GP_Sloc:funciones.adb:101:13" (#"funciones.adb" 101 0 0# ()) );
            ( "GP_Sloc:funciones.adb:101:17" (#"funciones.adb" 101 0 0# ()) );
            ( "GP_Sloc:funciones.adb:101:22" (#"funciones.adb" 101 0 0# #"funciones.adb" 101 0 0# Funciones__dectobin__res.res.Array__Int__Funciones__binary_values.map__content <- ( (Array__Int__Funciones__binary_values.set(Funciones__dectobin__res.res.Array__Int__Funciones__binary_values.map__content) (( #"funciones.adb" 101 0 0# assert { #"funciones.adb" 101 0 0# (#"funciones.adb" 101 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_1_while__if__res_assign__ixdcomp" "GP_Sloc:funciones.adb:101:17" "GP_Id:1" "comment:            res(pos) := 1;
                ^ funciones.adb:101:17:VC_INDEX_CHECK" ( (Funciones__ThbinarioD1.first <= Funciones__dectobin__pos.pos.int__content) /\ (Funciones__dectobin__pos.pos.int__content <= Funciones__ThbinarioD1.last) ) )) };
            Funciones__dectobin__pos.pos.int__content )) (( 1 : Funciones__binary_values.binary_values ))) )) ) )) else (
            ( "GP_Sloc:funciones.adb:102:10" (if ((Funciones__dectobin__temp.temp.int__content = 1)) then (
             ( ( "GP_Sloc:funciones.adb:103:13" (#"funciones.adb" 103 0 0# ()) );
             ( "GP_Sloc:funciones.adb:103:17" (#"funciones.adb" 103 0 0# ()) );
             ( "GP_Sloc:funciones.adb:103:22" (#"funciones.adb" 103 0 0# #"funciones.adb" 103 0 0# Funciones__dectobin__res.res.Array__Int__Funciones__binary_values.map__content <- ( (Array__Int__Funciones__binary_values.set(Funciones__dectobin__res.res.Array__Int__Funciones__binary_values.map__content) (( #"funciones.adb" 103 0 0# assert { #"funciones.adb" 103 0 0# (#"funciones.adb" 103 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:funciones.adb:103:17" "GP_Reason:VC_INDEX_CHECK" "GP_Id:0" "comment:            res(pos) := 1;
                ^ funciones.adb:103:17:VC_INDEX_CHECK" "GP_Shape:L_1_while__if__res_assign__ixdcomp" ( (Funciones__ThbinarioD1.first <= Funciones__dectobin__pos.pos.int__content) /\ (Funciones__dectobin__pos.pos.int__content <= Funciones__ThbinarioD1.last) ) )) };
             Funciones__dectobin__pos.pos.int__content )) (( 1 : Funciones__binary_values.binary_values ))) )) );
             ( "GP_Sloc:funciones.adb:104:13" (#"funciones.adb" 104 0 0# ()) );
             ( "GP_Sloc:funciones.adb:104:18" (#"funciones.adb" 104 0 0# #"funciones.adb" 104 0 0# Funciones__dectobin__temp.temp.int__content <- ( 0 )) ) )) else (
             ())) ))) )))) );
          ( "GP_Sloc:funciones.adb:107:10" (#"funciones.adb" 107 0 0# ()) );
          ( "GP_Sloc:funciones.adb:107:18" (#"funciones.adb" 107 0 0# ()) );
          ( "GP_Sloc:funciones.adb:107:15" (#"funciones.adb" 107 0 0# #"funciones.adb" 107 0 0# Funciones__dectobin__temp.temp.int__content <- ( (#"funciones.adb" 107 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Sloc:funciones.adb:107:23" "GP_Id:5" "comment:         temp := temp / 2;
                      ^ funciones.adb:107:23:VC_DIVISION_CHECK" "GP_Shape:L_1_while__temp_assign__div" (Int_Division.div_(Funciones__dectobin__temp.temp.int__content) (2)) )) )) );
          ( "GP_Sloc:funciones.adb:108:10" (#"funciones.adb" 108 0 0# ()) );
          ( "GP_Sloc:funciones.adb:108:17" (#"funciones.adb" 108 0 0# ()) );
          ( "GP_Sloc:funciones.adb:108:14" (#"funciones.adb" 108 0 0# #"funciones.adb" 108 0 0# Funciones__dectobin__pos.pos.int__content <- ( (#"funciones.adb" 108 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:funciones.adb:108:21" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Id:6" "comment:         pos := pos - 1;
                    ^ funciones.adb:108:21:VC_OVERFLOW_CHECK" "GP_Shape:L_1_while__pos_assign__sub" (Standard__integer.range_check_((Funciones__dectobin__pos.pos.int__content - 1))) )) )) );
           abstract ensures {true}(let _ =  abstract ensures {true}(let _ = Funciones__dectobin__pos.pos.int__content in (
           ()))
           end  in (
           ()))
           end ;
           check {  (#"funciones.adb" 110 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:funciones.adb:110:10" "GP_Reason:VC_LOOP_VARIANT" "GP_Id:12" "comment:         pragma Loop_Variant (Decreases => pos);
         ^ funciones.adb:110:10:VC_LOOP_VARIANT" "GP_Shape:L_1_while" (Funciones__dectobin__pos.pos.int__content < temp___205.int__content) )) } )
         done )))
        )))
       )))
      )
    with
     Funciones__dectobin__L_1.L_1 -> ()
    end)) )) );
   ( "GP_Sloc:funciones.adb:116:14" (#"funciones.adb" 116 0 0# ()) );
   ( "GP_Sloc:funciones.adb:116:7" (#"funciones.adb" 116 0 0# ( #"funciones.adb" 116 0 0# funciones__dectobin__result.Array__Int__Funciones__binary_values.map__content <- ( Funciones__dectobin__res.res.Array__Int__Funciones__binary_values.map__content );
   #"funciones.adb" 116 0 0# raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = True in (
   ()))
   end ;
  funciones__dectobin__result.Array__Int__Funciones__binary_values.map__content )
end

(* Module for defining the value of the aggregate at funciones.adb:150, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_207___axiom
 use import "_gnatprove_standard".Main
 use        Standard__character
 use        Standard__character___axiom
 use        Standard__character__rep
 use        Array__Int__Standard__character
 use        Temp_____aggregate_def_207
 use        Array__Int__Standard__character

 axiom def_axiom :
  (forall temp___209   : int.
   (let temp___208 = (Temp_____aggregate_def_207.temp_____aggregate_def_207 temp___209) in (
    (if ((Standard__character___axiom.dynamic_invariant temp___209 True True True True)) then (
     (forall temp___210   : int.
      ((Standard__character__rep.to_rep (Array__Int__Standard__character.get temp___208 temp___210)) = temp___209))) else true)))
  )

end

(* Module for checking contracts and absence of run-time errors in subprogram "dectohex16" defined at funciones.ads:24, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Funciones__dectohex16__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Int_Division
 use        "_gnatprove_standard".Boolean
 use        Standard__string
 use        Standard__integer
 use        Standard__integer___axiom
 use        Standard__character
 use        Standard__character___axiom
 use        Standard__character__rep
 use        Array__Int__Standard__character
 use        Standard__string___axiom
 use        Funciones__hex
 use        Temp___String_Literal_154
 use        Funciones__dectohex16__n1
 use        Funciones__dectohex16__TTresSP1
 use        Funciones__dectohex16__TresS___axiom
 use        Array__Int__Standard__character
 use        Funciones__dectohex16__res
 use        Funciones__dectohex16__pos
 use        Funciones__dectohex16__temp
 use        Funciones__dectohex16__let
 use        Funciones__dectohex16__L_2
 use        Array__Int__Standard__character
 use        Temp_____aggregate_def_207
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer___axiom
 use        Standard__positive___axiom
 use        Standard__character___axiom
 use        Standard__string___axiom
 use        Standard__integer___axiom
 use        Funciones__dectohex16__res___axiom
 use        Funciones__dectohex16__pos___axiom
 use        Funciones__dectohex16__temp___axiom
 use        Funciones__dectohex16__let___axiom
 use        Temp_____aggregate_def_207___axiom
 use        Funciones__dectohex16__L_2___axiom
 use        Funciones__hex___axiom
 use        Funciones__dectohex16__n1___axiom
 use        Funciones__dectohex16__TresS___axiom
 use        Funciones__dectohex16__TTresSP1___axiom

 val funciones__dectohex16__result "model_projected" "model_trace:2846@result" "name:DectoHex16"  : Standard__string.string__ref 
 
 let def #"funciones.ads" 24 0 0#"W:diverges:N" "GP_Subp:funciones.ads:24" 
   (__void_param : unit)
  requires { #"funciones.ads" 24 0 0# true }
  ensures { #"funciones.ads" 24 0 0# true }
   =
  ( #"funciones.ads" 24 0 0# assume { #"funciones.ads" 24 0 0# (Standard__string___axiom.dynamic_invariant Funciones__hex.hex True False True True) };
  (let temp___218 = (Standard__string.of_array (Temp___String_Literal_154.temp___String_Literal_154 ()) 1 16) in (
   #"funciones.ads" 24 0 0# assume { #"funciones.ads" 24 0 0# (temp___218 = Funciones__hex.hex) }))
  ;
  () (* Assume dynamic invariants of inputs of the subprogram funciones.ads:24 *)
  ;
  #"funciones.ads" 24 0 0# assume { #"funciones.ads" 24 0 0# (Standard__integer___axiom.dynamic_invariant Funciones__dectohex16__n1.n1 True False True True) };
  #"funciones.ads" 24 0 0# assume { #"funciones.ads" 24 0 0# true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram funciones.ads:24 *)
  ;
  () (* Check for RTE in the Pre of the subprogram funciones.ads:24 *)
  ;
  #"funciones.ads" 24 0 0# abstract ensures {true}(let _ = (Funciones__dectohex16__n1.n1 >= 0) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram funciones.ads:24 *)
  ;
  #"funciones.ads" 24 0 0# assume { #"funciones.ads" 24 0 0# (Funciones__dectohex16__n1.n1 >= 0) };
  #"funciones.ads" 24 0 0# try
   ( (#"funciones.adb" 142 0 0# ());
   (#"funciones.adb" 142 0 0# ( #"funciones.adb" 142 0 0# abstract ensures {true}(let _ = () in (
    ()))
    end ;
   #"funciones.adb" 142 0 0# assume { #"funciones.adb" 142 0 0# (Funciones__dectohex16__TresS___axiom.default_initial_assumption Funciones__dectohex16__res.res.Array__Int__Standard__character.map__content False) };
   #"funciones.adb" 142 0 0# assume { #"funciones.adb" 142 0 0# (Funciones__dectohex16__TresS___axiom.dynamic_invariant Funciones__dectohex16__res.res.Array__Int__Standard__character.map__content False False True True) } ));
   (#"funciones.adb" 143 0 0# ( #"funciones.adb" 143 0 0# Funciones__dectohex16__pos.pos.int__content <- ( 4 );
   #"funciones.adb" 143 0 0# assume { #"funciones.adb" 143 0 0# (Standard__integer___axiom.dynamic_invariant Funciones__dectohex16__pos.pos.int__content True False True True) } ));
   (#"funciones.adb" 144 0 0# ( #"funciones.adb" 144 0 0# Funciones__dectohex16__temp.temp.int__content <- ( Funciones__dectohex16__n1.n1 );
   #"funciones.adb" 144 0 0# assume { #"funciones.adb" 144 0 0# (Standard__integer___axiom.dynamic_invariant Funciones__dectohex16__temp.temp.int__content True False True True) } ));
   (#"funciones.adb" 145 0 0# ( #"funciones.adb" 145 0 0# abstract ensures {true}(let _ = () in (
    ()))
    end ;
   #"funciones.adb" 145 0 0# assume { #"funciones.adb" 145 0 0# (Standard__character___axiom.default_initial_assumption Funciones__dectohex16__let.let__.int__content False) };
   #"funciones.adb" 145 0 0# assume { #"funciones.adb" 145 0 0# (Standard__character___axiom.dynamic_invariant Funciones__dectohex16__let.let__.int__content False False True True) } ));
   (#"funciones.adb" 152 0 0# ());
   ( "GP_Sloc:funciones.adb:150:7" (#"funciones.adb" 150 0 0# ()) );
   ( "GP_Sloc:funciones.adb:150:11" (#"funciones.adb" 150 0 0# #"funciones.adb" 150 0 0# Funciones__dectohex16__res.res.Array__Int__Standard__character.map__content <- ( (Temp_____aggregate_def_207.temp_____aggregate_def_207(48)) )) );
   ( "GP_Sloc:funciones.adb:152:22" (#"funciones.adb" 152 0 0# ( () (* Translation of an Ada loop from funciones.adb:152 *)
   ;
   (if ((Funciones__dectohex16__pos.pos.int__content >= 1)) then (
    #"funciones.adb" 152 0 0# try
     ( #"funciones.adb" 152 0 0# abstract ensures {true}(let _ = Funciones__dectohex16__let.let__.int__content in (
      ()))
      end ;
     (let temp___215 = #"funciones.adb" 152 0 0# (any int
     ensures {#"funciones.adb" 152 0 0# (result = Funciones__dectohex16__let.let__.int__content)} 
     ) in (
      ( #"funciones.adb" 152 0 0# abstract ensures {true}(let _ = Funciones__dectohex16__temp.temp.int__content in (
       ()))
       end ;
      (let temp___214 = #"funciones.adb" 152 0 0# (any int
      ensures {#"funciones.adb" 152 0 0# (result = Funciones__dectohex16__temp.temp.int__content)} 
      ) in (
       ( #"funciones.adb" 152 0 0# abstract ensures {true}(let _ = Funciones__dectohex16__pos.pos.int__content in (
        ()))
        end ;
       (let temp___213 = #"funciones.adb" 152 0 0# (any int
       ensures {#"funciones.adb" 152 0 0# (result = Funciones__dectohex16__pos.pos.int__content)} 
       ) in (
        ( #"funciones.adb" 152 0 0# abstract ensures {true}(let _ = Funciones__dectohex16__res.res.Array__Int__Standard__character.map__content in (
         ()))
         end ;
        (let temp___211 = #"funciones.adb" 152 0 0# (any Array__Int__Standard__character.map
        ensures {#"funciones.adb" 152 0 0# (result = Funciones__dectohex16__res.res.Array__Int__Standard__character.map__content)} 
        ) in (
         #"funciones.adb" 152 0 0# let temp___216 = { int__content = 0 } in 
          ( () (* First unroling of the loop statements appearing before the loop invariant of loop funciones.adb:152 *)
          ;
          ( "GP_Sloc:funciones.adb:154:15" (#"funciones.adb" 154 0 0# ()) );
          ( "GP_Sloc:funciones.adb:154:10" (#"funciones.adb" 154 0 0# (if (((#"funciones.adb" 154 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Sloc:funciones.adb:154:20" "GP_Id:13" "comment:         case temp rem 16 is
                   ^ funciones.adb:154:20:VC_DIVISION_CHECK" "GP_Shape:L_2_while__case__rem" (Int_Division.rem_(Funciones__dectohex16__temp.temp.int__content) (16)) )) = 0)) then (
           ( ( "GP_Sloc:funciones.adb:155:23" (#"funciones.adb" 155 0 0# ()) );
           ( "GP_Sloc:funciones.adb:155:27" (#"funciones.adb" 155 0 0# #"funciones.adb" 155 0 0# Funciones__dectohex16__let.let__.int__content <- ( 48 )) ) )) else if (((#"funciones.adb" 154 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Sloc:funciones.adb:154:20" "GP_Id:13" "comment:         case temp rem 16 is
                   ^ funciones.adb:154:20:VC_DIVISION_CHECK" "GP_Shape:L_2_while__case__rem" (Int_Division.rem_(Funciones__dectohex16__temp.temp.int__content) (16)) )) = 1)) then (
           ( ( "GP_Sloc:funciones.adb:156:23" (#"funciones.adb" 156 0 0# ()) );
           ( "GP_Sloc:funciones.adb:156:27" (#"funciones.adb" 156 0 0# #"funciones.adb" 156 0 0# Funciones__dectohex16__let.let__.int__content <- ( 49 )) ) ))  else if (((#"funciones.adb" 154 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Sloc:funciones.adb:154:20" "GP_Id:13" "comment:         case temp rem 16 is
                   ^ funciones.adb:154:20:VC_DIVISION_CHECK" "GP_Shape:L_2_while__case__rem" (Int_Division.rem_(Funciones__dectohex16__temp.temp.int__content) (16)) )) = 2)) then (
           ( ( "GP_Sloc:funciones.adb:157:23" (#"funciones.adb" 157 0 0# ()) );
           ( "GP_Sloc:funciones.adb:157:27" (#"funciones.adb" 157 0 0# #"funciones.adb" 157 0 0# Funciones__dectohex16__let.let__.int__content <- ( 50 )) ) ))  else if (((#"funciones.adb" 154 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Sloc:funciones.adb:154:20" "GP_Id:13" "comment:         case temp rem 16 is
                   ^ funciones.adb:154:20:VC_DIVISION_CHECK" "GP_Shape:L_2_while__case__rem" (Int_Division.rem_(Funciones__dectohex16__temp.temp.int__content) (16)) )) = 3)) then (
           ( ( "GP_Sloc:funciones.adb:158:23" (#"funciones.adb" 158 0 0# ()) );
           ( "GP_Sloc:funciones.adb:158:27" (#"funciones.adb" 158 0 0# #"funciones.adb" 158 0 0# Funciones__dectohex16__let.let__.int__content <- ( 51 )) ) ))  else if (((#"funciones.adb" 154 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Sloc:funciones.adb:154:20" "GP_Id:13" "comment:         case temp rem 16 is
                   ^ funciones.adb:154:20:VC_DIVISION_CHECK" "GP_Shape:L_2_while__case__rem" (Int_Division.rem_(Funciones__dectohex16__temp.temp.int__content) (16)) )) = 4)) then (
           ( ( "GP_Sloc:funciones.adb:159:23" (#"funciones.adb" 159 0 0# ()) );
           ( "GP_Sloc:funciones.adb:159:27" (#"funciones.adb" 159 0 0# #"funciones.adb" 159 0 0# Funciones__dectohex16__let.let__.int__content <- ( 52 )) ) ))  else if (((#"funciones.adb" 154 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Sloc:funciones.adb:154:20" "GP_Id:13" "comment:         case temp rem 16 is
                   ^ funciones.adb:154:20:VC_DIVISION_CHECK" "GP_Shape:L_2_while__case__rem" (Int_Division.rem_(Funciones__dectohex16__temp.temp.int__content) (16)) )) = 5)) then (
           ( ( "GP_Sloc:funciones.adb:160:23" (#"funciones.adb" 160 0 0# ()) );
           ( "GP_Sloc:funciones.adb:160:27" (#"funciones.adb" 160 0 0# #"funciones.adb" 160 0 0# Funciones__dectohex16__let.let__.int__content <- ( 53 )) ) ))  else if (((#"funciones.adb" 154 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Sloc:funciones.adb:154:20" "GP_Id:13" "comment:         case temp rem 16 is
                   ^ funciones.adb:154:20:VC_DIVISION_CHECK" "GP_Shape:L_2_while__case__rem" (Int_Division.rem_(Funciones__dectohex16__temp.temp.int__content) (16)) )) = 6)) then (
           ( ( "GP_Sloc:funciones.adb:161:23" (#"funciones.adb" 161 0 0# ()) );
           ( "GP_Sloc:funciones.adb:161:27" (#"funciones.adb" 161 0 0# #"funciones.adb" 161 0 0# Funciones__dectohex16__let.let__.int__content <- ( 54 )) ) ))  else if (((#"funciones.adb" 154 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Sloc:funciones.adb:154:20" "GP_Id:13" "comment:         case temp rem 16 is
                   ^ funciones.adb:154:20:VC_DIVISION_CHECK" "GP_Shape:L_2_while__case__rem" (Int_Division.rem_(Funciones__dectohex16__temp.temp.int__content) (16)) )) = 7)) then (
           ( ( "GP_Sloc:funciones.adb:162:23" (#"funciones.adb" 162 0 0# ()) );
           ( "GP_Sloc:funciones.adb:162:27" (#"funciones.adb" 162 0 0# #"funciones.adb" 162 0 0# Funciones__dectohex16__let.let__.int__content <- ( 55 )) ) ))  else if (((#"funciones.adb" 154 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Sloc:funciones.adb:154:20" "GP_Id:13" "comment:         case temp rem 16 is
                   ^ funciones.adb:154:20:VC_DIVISION_CHECK" "GP_Shape:L_2_while__case__rem" (Int_Division.rem_(Funciones__dectohex16__temp.temp.int__content) (16)) )) = 8)) then (
           ( ( "GP_Sloc:funciones.adb:163:23" (#"funciones.adb" 163 0 0# ()) );
           ( "GP_Sloc:funciones.adb:163:27" (#"funciones.adb" 163 0 0# #"funciones.adb" 163 0 0# Funciones__dectohex16__let.let__.int__content <- ( 56 )) ) ))  else if (((#"funciones.adb" 154 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Sloc:funciones.adb:154:20" "GP_Id:13" "comment:         case temp rem 16 is
                   ^ funciones.adb:154:20:VC_DIVISION_CHECK" "GP_Shape:L_2_while__case__rem" (Int_Division.rem_(Funciones__dectohex16__temp.temp.int__content) (16)) )) = 9)) then (
           ( ( "GP_Sloc:funciones.adb:164:23" (#"funciones.adb" 164 0 0# ()) );
           ( "GP_Sloc:funciones.adb:164:27" (#"funciones.adb" 164 0 0# #"funciones.adb" 164 0 0# Funciones__dectohex16__let.let__.int__content <- ( 57 )) ) ))  else if (((#"funciones.adb" 154 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Sloc:funciones.adb:154:20" "GP_Id:13" "comment:         case temp rem 16 is
                   ^ funciones.adb:154:20:VC_DIVISION_CHECK" "GP_Shape:L_2_while__case__rem" (Int_Division.rem_(Funciones__dectohex16__temp.temp.int__content) (16)) )) = 10)) then (
           ( ( "GP_Sloc:funciones.adb:165:24" (#"funciones.adb" 165 0 0# ()) );
           ( "GP_Sloc:funciones.adb:165:28" (#"funciones.adb" 165 0 0# #"funciones.adb" 165 0 0# Funciones__dectohex16__let.let__.int__content <- ( 65 )) ) ))  else if (((#"funciones.adb" 154 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Sloc:funciones.adb:154:20" "GP_Id:13" "comment:         case temp rem 16 is
                   ^ funciones.adb:154:20:VC_DIVISION_CHECK" "GP_Shape:L_2_while__case__rem" (Int_Division.rem_(Funciones__dectohex16__temp.temp.int__content) (16)) )) = 11)) then (
           ( ( "GP_Sloc:funciones.adb:166:24" (#"funciones.adb" 166 0 0# ()) );
           ( "GP_Sloc:funciones.adb:166:28" (#"funciones.adb" 166 0 0# #"funciones.adb" 166 0 0# Funciones__dectohex16__let.let__.int__content <- ( 66 )) ) ))  else if (((#"funciones.adb" 154 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Sloc:funciones.adb:154:20" "GP_Id:13" "comment:         case temp rem 16 is
                   ^ funciones.adb:154:20:VC_DIVISION_CHECK" "GP_Shape:L_2_while__case__rem" (Int_Division.rem_(Funciones__dectohex16__temp.temp.int__content) (16)) )) = 12)) then (
           ( ( "GP_Sloc:funciones.adb:167:24" (#"funciones.adb" 167 0 0# ()) );
           ( "GP_Sloc:funciones.adb:167:28" (#"funciones.adb" 167 0 0# #"funciones.adb" 167 0 0# Funciones__dectohex16__let.let__.int__content <- ( 67 )) ) ))  else if (((#"funciones.adb" 154 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Sloc:funciones.adb:154:20" "GP_Id:13" "comment:         case temp rem 16 is
                   ^ funciones.adb:154:20:VC_DIVISION_CHECK" "GP_Shape:L_2_while__case__rem" (Int_Division.rem_(Funciones__dectohex16__temp.temp.int__content) (16)) )) = 13)) then (
           ( ( "GP_Sloc:funciones.adb:168:24" (#"funciones.adb" 168 0 0# ()) );
           ( "GP_Sloc:funciones.adb:168:28" (#"funciones.adb" 168 0 0# #"funciones.adb" 168 0 0# Funciones__dectohex16__let.let__.int__content <- ( 68 )) ) ))  else if (((#"funciones.adb" 154 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Sloc:funciones.adb:154:20" "GP_Id:13" "comment:         case temp rem 16 is
                   ^ funciones.adb:154:20:VC_DIVISION_CHECK" "GP_Shape:L_2_while__case__rem" (Int_Division.rem_(Funciones__dectohex16__temp.temp.int__content) (16)) )) = 14)) then (
           ( ( "GP_Sloc:funciones.adb:169:24" (#"funciones.adb" 169 0 0# ()) );
           ( "GP_Sloc:funciones.adb:169:28" (#"funciones.adb" 169 0 0# #"funciones.adb" 169 0 0# Funciones__dectohex16__let.let__.int__content <- ( 69 )) ) ))  else if (((#"funciones.adb" 154 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Sloc:funciones.adb:154:20" "GP_Id:13" "comment:         case temp rem 16 is
                   ^ funciones.adb:154:20:VC_DIVISION_CHECK" "GP_Shape:L_2_while__case__rem" (Int_Division.rem_(Funciones__dectohex16__temp.temp.int__content) (16)) )) = 15)) then (
           ( ( "GP_Sloc:funciones.adb:170:24" (#"funciones.adb" 170 0 0# ()) );
           ( "GP_Sloc:funciones.adb:170:28" (#"funciones.adb" 170 0 0# #"funciones.adb" 170 0 0# Funciones__dectohex16__let.let__.int__content <- ( 70 )) ) )) else (
           ( ( "GP_Sloc:funciones.adb:172:28" (#"funciones.adb" 172 0 0# ()) );
           ( "GP_Sloc:funciones.adb:172:32" (#"funciones.adb" 172 0 0# #"funciones.adb" 172 0 0# Funciones__dectohex16__let.let__.int__content <- ( 48 )) ) )))) );
          ( "GP_Sloc:funciones.adb:175:10" (#"funciones.adb" 175 0 0# ()) );
          ( "GP_Sloc:funciones.adb:175:14" (#"funciones.adb" 175 0 0# ()) );
          ( "GP_Sloc:funciones.adb:175:22" (#"funciones.adb" 175 0 0# ()) );
          ( "GP_Sloc:funciones.adb:175:19" (#"funciones.adb" 175 0 0# #"funciones.adb" 175 0 0# Funciones__dectohex16__res.res.Array__Int__Standard__character.map__content <- ( (Array__Int__Standard__character.set(Funciones__dectohex16__res.res.Array__Int__Standard__character.map__content) (( #"funciones.adb" 175 0 0# assert { #"funciones.adb" 175 0 0# (#"funciones.adb" 175 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:funciones.adb:175:14" "GP_Id:14" "comment:         res(pos) := let;
             ^ funciones.adb:175:14:VC_INDEX_CHECK" "GP_Shape:L_2_while__res_assign__ixdcomp" ( (Funciones__dectohex16__TTresSP1.first <= Funciones__dectohex16__pos.pos.int__content) /\ (Funciones__dectohex16__pos.pos.int__content <= Funciones__dectohex16__TTresSP1.last) ) )) };
          Funciones__dectohex16__pos.pos.int__content )) ((Standard__character__rep.of_rep(Funciones__dectohex16__let.let__.int__content)))) )) );
          ( "GP_Sloc:funciones.adb:177:13" (#"funciones.adb" 177 0 0# ()) );
          ( "GP_Sloc:funciones.adb:177:10" (#"funciones.adb" 177 0 0# (if ((Funciones__dectohex16__temp.temp.int__content < 16)) then (
           ( ( "GP_Sloc:funciones.adb:178:13" (#"funciones.adb" 178 0 0# ()) );
           ( "GP_Sloc:funciones.adb:178:18" (#"funciones.adb" 178 0 0# #"funciones.adb" 178 0 0# Funciones__dectohex16__temp.temp.int__content <- ( 0 )) ) )) else (
           ()))) );
          ( "GP_Sloc:funciones.adb:181:10" (#"funciones.adb" 181 0 0# ()) );
          ( "GP_Sloc:funciones.adb:181:18" (#"funciones.adb" 181 0 0# ()) );
          ( "GP_Sloc:funciones.adb:181:15" (#"funciones.adb" 181 0 0# #"funciones.adb" 181 0 0# Funciones__dectohex16__temp.temp.int__content <- ( (#"funciones.adb" 181 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Sloc:funciones.adb:181:23" "GP_Id:15" "comment:         temp := temp / 16;
                      ^ funciones.adb:181:23:VC_DIVISION_CHECK" "GP_Shape:L_2_while__temp_assign__div" (Int_Division.div_(Funciones__dectohex16__temp.temp.int__content) (16)) )) )) );
          ( "GP_Sloc:funciones.adb:182:10" (#"funciones.adb" 182 0 0# ()) );
          ( "GP_Sloc:funciones.adb:182:17" (#"funciones.adb" 182 0 0# ()) );
          ( "GP_Sloc:funciones.adb:182:14" (#"funciones.adb" 182 0 0# #"funciones.adb" 182 0 0# Funciones__dectohex16__pos.pos.int__content <- ( (#"funciones.adb" 182 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:funciones.adb:182:21" "GP_Id:16" "comment:         pos := pos - 1;
                    ^ funciones.adb:182:21:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__pos_assign__sub" (Standard__integer.range_check_((Funciones__dectohex16__pos.pos.int__content - 1))) )) )) );
          () (* While loop translating the Ada loop from funciones.adb:152 *)
          ;
           while True do
           invariant { 
            (#"funciones.adb" 185 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Sloc:funciones.adb:185:33" "GP_Id:17" "comment:         pragma Loop_Invariant (pos in 1 .. 4);
                                ^ funciones.adb:185:33:VC_LOOP_INVARIANT" "GP_Shape:L_2_while__pragargs__in" ( "GP_Pretty_Ada:2690" "GP_Sloc:funciones.adb:185:33" ( (1 <= Funciones__dectohex16__pos.pos.int__content) /\ (Funciones__dectohex16__pos.pos.int__content <= 4) ) ) ))
            }
           invariant { 
            (#"funciones.adb" 186 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Shape:L_2_while__pragargs__in" "GP_Sloc:funciones.adb:186:33" "GP_Id:18" "comment:         pragma Loop_Invariant (temp in 0 .. n1);
                                ^ funciones.adb:186:33:VC_LOOP_INVARIANT" ( "GP_Pretty_Ada:2699" "GP_Sloc:funciones.adb:186:33" ( (0 <= Funciones__dectohex16__temp.temp.int__content) /\ (Funciones__dectohex16__temp.temp.int__content <= Funciones__dectohex16__n1.n1) ) ) ))
            }
           invariant { 
            (#"funciones.adb" 187 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Sloc:funciones.adb:187:33" "GP_Id:21" "comment:         pragma Loop_Invariant (for some x in reverse hex'Range => res(pos) <= hex(x));
                                ^ funciones.adb:187:33:VC_LOOP_INVARIANT" "GP_Shape:L_2_while__pragargs__forsome" (exists x  : int.
             ( ( ((Standard__string.first Funciones__hex.hex) <= x) /\ (x <= (Standard__string.last Funciones__hex.hex)) ) /\ ( "GP_Pretty_Ada:2721" "GP_Sloc:funciones.adb:187:68" ((Standard__character__rep.to_rep (Array__Int__Standard__character.get Funciones__dectohex16__res.res.Array__Int__Standard__character.map__content Funciones__dectohex16__pos.pos.int__content)) <= (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Funciones__hex.hex) x))) ) )) ))
            }
           ( () (* Assume implicit invariants from the loop funciones.adb:152 *)
           ;
            assume {  ( ( ( ( ( ( ( ( true /\ (Funciones__dectohex16__TresS___axiom.dynamic_invariant Funciones__dectohex16__res.res.Array__Int__Standard__character.map__content False True True True) ) /\ true ) /\ (Standard__integer___axiom.dynamic_invariant Funciones__dectohex16__pos.pos.int__content False True True True) ) /\ true ) /\ (Standard__integer___axiom.dynamic_invariant Funciones__dectohex16__temp.temp.int__content False True True True) ) /\ true ) /\ (Standard__character___axiom.dynamic_invariant Funciones__dectohex16__let.let__.int__content False True True True) ) /\ true ) };
           () (* Check for absence of RTE in the invariant of loop funciones.adb:152 *)
           ;
            abstract ensures {true}(let _ = (Boolean.andb((1 <= Funciones__dectohex16__pos.pos.int__content)) ((Funciones__dectohex16__pos.pos.int__content <= 4))) in (
            ()))
            end ;
            abstract ensures {true}(let _ = (Boolean.andb((0 <= Funciones__dectohex16__temp.temp.int__content)) ((Funciones__dectohex16__temp.temp.int__content <= Funciones__dectohex16__n1.n1))) in (
            ()))
            end ;
            abstract ensures {true}(let _ = ( (let x =  (any int
           ) in (
            (if ((Boolean.andb(((  abstract ensures {true}(let _ = Funciones__hex.hex in (
             ()))
             end ;
            (Standard__string.first(Funciones__hex.hex)) ) <= x)) ((x <= (  abstract ensures {true}(let _ = Funciones__hex.hex in (
             ()))
             end ;
            (Standard__string.last(Funciones__hex.hex)) ))))) then (
              abstract ensures {true}(let _ = ((Standard__character__rep.to_rep((Array__Int__Standard__character.get(Funciones__dectohex16__res.res.Array__Int__Standard__character.map__content) ((  assert {  (#"funciones.adb" 187 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:funciones.adb:187:72" "GP_Id:19" "comment:         pragma Loop_Invariant (for some x in reverse hex'Range => res(pos) <= hex(x));
                                                                       ^ funciones.adb:187:72:VC_INDEX_CHECK" "GP_Shape:L_2_while__pragargs__forsome__cmp__ixdcomp" ( (Funciones__dectohex16__TTresSP1.first <= Funciones__dectohex16__pos.pos.int__content) /\ (Funciones__dectohex16__pos.pos.int__content <= Funciones__dectohex16__TTresSP1.last) ) )) };
             Funciones__dectohex16__pos.pos.int__content ))))) <= (Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Funciones__hex.hex))) ((  assert {  (#"funciones.adb" 187 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_2_while__pragargs__forsome__cmp__ixdcomp" "GP_Sloc:funciones.adb:187:84" "GP_Id:20" "comment:         pragma Loop_Invariant (for some x in reverse hex'Range => res(pos) <= hex(x));
                                                                                   ^ funciones.adb:187:84:VC_INDEX_CHECK" ( ((Standard__string.first Funciones__hex.hex) <= x) /\ (x <= (Standard__string.last Funciones__hex.hex)) ) )) };
             x )))))) in (
              ()))
              end ))))
           ;
            (any bool
           requires { true} 
           ensures { ( (result = True) <-> (exists x  : int.
            ( ( ((Standard__string.first Funciones__hex.hex) <= x) /\ (x <= (Standard__string.last Funciones__hex.hex)) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get Funciones__dectohex16__res.res.Array__Int__Standard__character.map__content Funciones__dectohex16__pos.pos.int__content)) <= (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Funciones__hex.hex) x))) )) )} 
           ) ) in (
            ()))
            end ;
            temp___216.int__content <- ( Funciones__dectohex16__pos.pos.int__content );
           () (* Loop statements appearing after the loop invariant of loop funciones.adb:152 *)
           ;
           () (* Check for the exit condition and loop statements appearing before the loop invariant of loop funciones.adb:152 *)
           ;
           (if (not ( (Funciones__dectohex16__pos.pos.int__content >= 1) )) then (
             raise Funciones__dectohex16__L_2.L_2));
           ( "GP_Sloc:funciones.adb:154:15" (#"funciones.adb" 154 0 0# ()) );
           ( "GP_Sloc:funciones.adb:154:10" (#"funciones.adb" 154 0 0# (if (((#"funciones.adb" 154 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Sloc:funciones.adb:154:20" "GP_Id:13" "comment:         case temp rem 16 is
                   ^ funciones.adb:154:20:VC_DIVISION_CHECK" "GP_Shape:L_2_while__case__rem" (Int_Division.rem_(Funciones__dectohex16__temp.temp.int__content) (16)) )) = 0)) then (
            ( ( "GP_Sloc:funciones.adb:155:23" (#"funciones.adb" 155 0 0# ()) );
            ( "GP_Sloc:funciones.adb:155:27" (#"funciones.adb" 155 0 0# #"funciones.adb" 155 0 0# Funciones__dectohex16__let.let__.int__content <- ( 48 )) ) )) else if (((#"funciones.adb" 154 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Sloc:funciones.adb:154:20" "GP_Id:13" "comment:         case temp rem 16 is
                   ^ funciones.adb:154:20:VC_DIVISION_CHECK" "GP_Shape:L_2_while__case__rem" (Int_Division.rem_(Funciones__dectohex16__temp.temp.int__content) (16)) )) = 1)) then (
            ( ( "GP_Sloc:funciones.adb:156:23" (#"funciones.adb" 156 0 0# ()) );
            ( "GP_Sloc:funciones.adb:156:27" (#"funciones.adb" 156 0 0# #"funciones.adb" 156 0 0# Funciones__dectohex16__let.let__.int__content <- ( 49 )) ) ))  else if (((#"funciones.adb" 154 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Sloc:funciones.adb:154:20" "GP_Id:13" "comment:         case temp rem 16 is
                   ^ funciones.adb:154:20:VC_DIVISION_CHECK" "GP_Shape:L_2_while__case__rem" (Int_Division.rem_(Funciones__dectohex16__temp.temp.int__content) (16)) )) = 2)) then (
            ( ( "GP_Sloc:funciones.adb:157:23" (#"funciones.adb" 157 0 0# ()) );
            ( "GP_Sloc:funciones.adb:157:27" (#"funciones.adb" 157 0 0# #"funciones.adb" 157 0 0# Funciones__dectohex16__let.let__.int__content <- ( 50 )) ) ))  else if (((#"funciones.adb" 154 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Sloc:funciones.adb:154:20" "GP_Id:13" "comment:         case temp rem 16 is
                   ^ funciones.adb:154:20:VC_DIVISION_CHECK" "GP_Shape:L_2_while__case__rem" (Int_Division.rem_(Funciones__dectohex16__temp.temp.int__content) (16)) )) = 3)) then (
            ( ( "GP_Sloc:funciones.adb:158:23" (#"funciones.adb" 158 0 0# ()) );
            ( "GP_Sloc:funciones.adb:158:27" (#"funciones.adb" 158 0 0# #"funciones.adb" 158 0 0# Funciones__dectohex16__let.let__.int__content <- ( 51 )) ) ))  else if (((#"funciones.adb" 154 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Sloc:funciones.adb:154:20" "GP_Id:13" "comment:         case temp rem 16 is
                   ^ funciones.adb:154:20:VC_DIVISION_CHECK" "GP_Shape:L_2_while__case__rem" (Int_Division.rem_(Funciones__dectohex16__temp.temp.int__content) (16)) )) = 4)) then (
            ( ( "GP_Sloc:funciones.adb:159:23" (#"funciones.adb" 159 0 0# ()) );
            ( "GP_Sloc:funciones.adb:159:27" (#"funciones.adb" 159 0 0# #"funciones.adb" 159 0 0# Funciones__dectohex16__let.let__.int__content <- ( 52 )) ) ))  else if (((#"funciones.adb" 154 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Sloc:funciones.adb:154:20" "GP_Id:13" "comment:         case temp rem 16 is
                   ^ funciones.adb:154:20:VC_DIVISION_CHECK" "GP_Shape:L_2_while__case__rem" (Int_Division.rem_(Funciones__dectohex16__temp.temp.int__content) (16)) )) = 5)) then (
            ( ( "GP_Sloc:funciones.adb:160:23" (#"funciones.adb" 160 0 0# ()) );
            ( "GP_Sloc:funciones.adb:160:27" (#"funciones.adb" 160 0 0# #"funciones.adb" 160 0 0# Funciones__dectohex16__let.let__.int__content <- ( 53 )) ) ))  else if (((#"funciones.adb" 154 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Sloc:funciones.adb:154:20" "GP_Id:13" "comment:         case temp rem 16 is
                   ^ funciones.adb:154:20:VC_DIVISION_CHECK" "GP_Shape:L_2_while__case__rem" (Int_Division.rem_(Funciones__dectohex16__temp.temp.int__content) (16)) )) = 6)) then (
            ( ( "GP_Sloc:funciones.adb:161:23" (#"funciones.adb" 161 0 0# ()) );
            ( "GP_Sloc:funciones.adb:161:27" (#"funciones.adb" 161 0 0# #"funciones.adb" 161 0 0# Funciones__dectohex16__let.let__.int__content <- ( 54 )) ) ))  else if (((#"funciones.adb" 154 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Sloc:funciones.adb:154:20" "GP_Id:13" "comment:         case temp rem 16 is
                   ^ funciones.adb:154:20:VC_DIVISION_CHECK" "GP_Shape:L_2_while__case__rem" (Int_Division.rem_(Funciones__dectohex16__temp.temp.int__content) (16)) )) = 7)) then (
            ( ( "GP_Sloc:funciones.adb:162:23" (#"funciones.adb" 162 0 0# ()) );
            ( "GP_Sloc:funciones.adb:162:27" (#"funciones.adb" 162 0 0# #"funciones.adb" 162 0 0# Funciones__dectohex16__let.let__.int__content <- ( 55 )) ) ))  else if (((#"funciones.adb" 154 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Sloc:funciones.adb:154:20" "GP_Id:13" "comment:         case temp rem 16 is
                   ^ funciones.adb:154:20:VC_DIVISION_CHECK" "GP_Shape:L_2_while__case__rem" (Int_Division.rem_(Funciones__dectohex16__temp.temp.int__content) (16)) )) = 8)) then (
            ( ( "GP_Sloc:funciones.adb:163:23" (#"funciones.adb" 163 0 0# ()) );
            ( "GP_Sloc:funciones.adb:163:27" (#"funciones.adb" 163 0 0# #"funciones.adb" 163 0 0# Funciones__dectohex16__let.let__.int__content <- ( 56 )) ) ))  else if (((#"funciones.adb" 154 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Sloc:funciones.adb:154:20" "GP_Id:13" "comment:         case temp rem 16 is
                   ^ funciones.adb:154:20:VC_DIVISION_CHECK" "GP_Shape:L_2_while__case__rem" (Int_Division.rem_(Funciones__dectohex16__temp.temp.int__content) (16)) )) = 9)) then (
            ( ( "GP_Sloc:funciones.adb:164:23" (#"funciones.adb" 164 0 0# ()) );
            ( "GP_Sloc:funciones.adb:164:27" (#"funciones.adb" 164 0 0# #"funciones.adb" 164 0 0# Funciones__dectohex16__let.let__.int__content <- ( 57 )) ) ))  else if (((#"funciones.adb" 154 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Sloc:funciones.adb:154:20" "GP_Id:13" "comment:         case temp rem 16 is
                   ^ funciones.adb:154:20:VC_DIVISION_CHECK" "GP_Shape:L_2_while__case__rem" (Int_Division.rem_(Funciones__dectohex16__temp.temp.int__content) (16)) )) = 10)) then (
            ( ( "GP_Sloc:funciones.adb:165:24" (#"funciones.adb" 165 0 0# ()) );
            ( "GP_Sloc:funciones.adb:165:28" (#"funciones.adb" 165 0 0# #"funciones.adb" 165 0 0# Funciones__dectohex16__let.let__.int__content <- ( 65 )) ) ))  else if (((#"funciones.adb" 154 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Sloc:funciones.adb:154:20" "GP_Id:13" "comment:         case temp rem 16 is
                   ^ funciones.adb:154:20:VC_DIVISION_CHECK" "GP_Shape:L_2_while__case__rem" (Int_Division.rem_(Funciones__dectohex16__temp.temp.int__content) (16)) )) = 11)) then (
            ( ( "GP_Sloc:funciones.adb:166:24" (#"funciones.adb" 166 0 0# ()) );
            ( "GP_Sloc:funciones.adb:166:28" (#"funciones.adb" 166 0 0# #"funciones.adb" 166 0 0# Funciones__dectohex16__let.let__.int__content <- ( 66 )) ) ))  else if (((#"funciones.adb" 154 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Sloc:funciones.adb:154:20" "GP_Id:13" "comment:         case temp rem 16 is
                   ^ funciones.adb:154:20:VC_DIVISION_CHECK" "GP_Shape:L_2_while__case__rem" (Int_Division.rem_(Funciones__dectohex16__temp.temp.int__content) (16)) )) = 12)) then (
            ( ( "GP_Sloc:funciones.adb:167:24" (#"funciones.adb" 167 0 0# ()) );
            ( "GP_Sloc:funciones.adb:167:28" (#"funciones.adb" 167 0 0# #"funciones.adb" 167 0 0# Funciones__dectohex16__let.let__.int__content <- ( 67 )) ) ))  else if (((#"funciones.adb" 154 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Sloc:funciones.adb:154:20" "GP_Id:13" "comment:         case temp rem 16 is
                   ^ funciones.adb:154:20:VC_DIVISION_CHECK" "GP_Shape:L_2_while__case__rem" (Int_Division.rem_(Funciones__dectohex16__temp.temp.int__content) (16)) )) = 13)) then (
            ( ( "GP_Sloc:funciones.adb:168:24" (#"funciones.adb" 168 0 0# ()) );
            ( "GP_Sloc:funciones.adb:168:28" (#"funciones.adb" 168 0 0# #"funciones.adb" 168 0 0# Funciones__dectohex16__let.let__.int__content <- ( 68 )) ) ))  else if (((#"funciones.adb" 154 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Sloc:funciones.adb:154:20" "GP_Id:13" "comment:         case temp rem 16 is
                   ^ funciones.adb:154:20:VC_DIVISION_CHECK" "GP_Shape:L_2_while__case__rem" (Int_Division.rem_(Funciones__dectohex16__temp.temp.int__content) (16)) )) = 14)) then (
            ( ( "GP_Sloc:funciones.adb:169:24" (#"funciones.adb" 169 0 0# ()) );
            ( "GP_Sloc:funciones.adb:169:28" (#"funciones.adb" 169 0 0# #"funciones.adb" 169 0 0# Funciones__dectohex16__let.let__.int__content <- ( 69 )) ) ))  else if (((#"funciones.adb" 154 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Sloc:funciones.adb:154:20" "GP_Id:13" "comment:         case temp rem 16 is
                   ^ funciones.adb:154:20:VC_DIVISION_CHECK" "GP_Shape:L_2_while__case__rem" (Int_Division.rem_(Funciones__dectohex16__temp.temp.int__content) (16)) )) = 15)) then (
            ( ( "GP_Sloc:funciones.adb:170:24" (#"funciones.adb" 170 0 0# ()) );
            ( "GP_Sloc:funciones.adb:170:28" (#"funciones.adb" 170 0 0# #"funciones.adb" 170 0 0# Funciones__dectohex16__let.let__.int__content <- ( 70 )) ) )) else (
            ( ( "GP_Sloc:funciones.adb:172:28" (#"funciones.adb" 172 0 0# ()) );
            ( "GP_Sloc:funciones.adb:172:32" (#"funciones.adb" 172 0 0# #"funciones.adb" 172 0 0# Funciones__dectohex16__let.let__.int__content <- ( 48 )) ) )))) );
           ( "GP_Sloc:funciones.adb:175:10" (#"funciones.adb" 175 0 0# ()) );
           ( "GP_Sloc:funciones.adb:175:14" (#"funciones.adb" 175 0 0# ()) );
           ( "GP_Sloc:funciones.adb:175:22" (#"funciones.adb" 175 0 0# ()) );
           ( "GP_Sloc:funciones.adb:175:19" (#"funciones.adb" 175 0 0# #"funciones.adb" 175 0 0# Funciones__dectohex16__res.res.Array__Int__Standard__character.map__content <- ( (Array__Int__Standard__character.set(Funciones__dectohex16__res.res.Array__Int__Standard__character.map__content) (( #"funciones.adb" 175 0 0# assert { #"funciones.adb" 175 0 0# (#"funciones.adb" 175 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:funciones.adb:175:14" "GP_Id:14" "comment:         res(pos) := let;
             ^ funciones.adb:175:14:VC_INDEX_CHECK" "GP_Shape:L_2_while__res_assign__ixdcomp" ( (Funciones__dectohex16__TTresSP1.first <= Funciones__dectohex16__pos.pos.int__content) /\ (Funciones__dectohex16__pos.pos.int__content <= Funciones__dectohex16__TTresSP1.last) ) )) };
           Funciones__dectohex16__pos.pos.int__content )) ((Standard__character__rep.of_rep(Funciones__dectohex16__let.let__.int__content)))) )) );
           ( "GP_Sloc:funciones.adb:177:13" (#"funciones.adb" 177 0 0# ()) );
           ( "GP_Sloc:funciones.adb:177:10" (#"funciones.adb" 177 0 0# (if ((Funciones__dectohex16__temp.temp.int__content < 16)) then (
            ( ( "GP_Sloc:funciones.adb:178:13" (#"funciones.adb" 178 0 0# ()) );
            ( "GP_Sloc:funciones.adb:178:18" (#"funciones.adb" 178 0 0# #"funciones.adb" 178 0 0# Funciones__dectohex16__temp.temp.int__content <- ( 0 )) ) )) else (
            ()))) );
           ( "GP_Sloc:funciones.adb:181:10" (#"funciones.adb" 181 0 0# ()) );
           ( "GP_Sloc:funciones.adb:181:18" (#"funciones.adb" 181 0 0# ()) );
           ( "GP_Sloc:funciones.adb:181:15" (#"funciones.adb" 181 0 0# #"funciones.adb" 181 0 0# Funciones__dectohex16__temp.temp.int__content <- ( (#"funciones.adb" 181 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Sloc:funciones.adb:181:23" "GP_Id:15" "comment:         temp := temp / 16;
                      ^ funciones.adb:181:23:VC_DIVISION_CHECK" "GP_Shape:L_2_while__temp_assign__div" (Int_Division.div_(Funciones__dectohex16__temp.temp.int__content) (16)) )) )) );
           ( "GP_Sloc:funciones.adb:182:10" (#"funciones.adb" 182 0 0# ()) );
           ( "GP_Sloc:funciones.adb:182:17" (#"funciones.adb" 182 0 0# ()) );
           ( "GP_Sloc:funciones.adb:182:14" (#"funciones.adb" 182 0 0# #"funciones.adb" 182 0 0# Funciones__dectohex16__pos.pos.int__content <- ( (#"funciones.adb" 182 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:funciones.adb:182:21" "GP_Id:16" "comment:         pos := pos - 1;
                    ^ funciones.adb:182:21:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__pos_assign__sub" (Standard__integer.range_check_((Funciones__dectohex16__pos.pos.int__content - 1))) )) )) );
            abstract ensures {true}(let _ =  abstract ensures {true}(let _ = Funciones__dectohex16__pos.pos.int__content in (
            ()))
            end  in (
            ()))
            end ;
            check {  (#"funciones.adb" 184 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_VARIANT" "GP_Sloc:funciones.adb:184:10" "GP_Id:22" "comment:         pragma Loop_Variant (Decreases => pos);
         ^ funciones.adb:184:10:VC_LOOP_VARIANT" "GP_Shape:L_2_while" (Funciones__dectohex16__pos.pos.int__content < temp___216.int__content) )) } )
          done )))
         )))
        )))
       )))
      )
    with
     Funciones__dectohex16__L_2.L_2 -> ()
    end)) )) );
   ( "GP_Sloc:funciones.adb:191:14" (#"funciones.adb" 191 0 0# ()) );
   ( "GP_Sloc:funciones.adb:191:7" (#"funciones.adb" 191 0 0# ( #"funciones.adb" 191 0 0# funciones__dectohex16__result.Standard__string.string__content <- ( (Standard__string.of_array(Funciones__dectohex16__res.res.Array__Int__Standard__character.map__content) (Funciones__dectohex16__TTresSP1.first) (Funciones__dectohex16__TTresSP1.last)) );
   #"funciones.adb" 191 0 0# raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = True in (
   ()))
   end ;
  funciones__dectohex16__result.Standard__string.string__content )
end
